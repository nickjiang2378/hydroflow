searchState.loadedDescShard("hydroflow", 0, "Hydroflow is a low-level dataflow-based runtime system for …\nThe nightly “never” type <code>!</code>\nAsserts that the variable’s type implements the given …\nHydroflow’s inner (intra-subgraph) compiled layer.\nGenerate a Hydroflow instance from Datalog code.\nTests that the given warnings are emitted by the hydroflow …\nParse Hydroflow “surface syntax” without emitting code.\nCreate a Hydroflow instance using Hydroflow’s custom “…\n<code>hydroflow_syntax!</code> but will not emit any diagnostics …\nChecks that the given closure is a monotonic function. For …\nChecks that the given closure is a morphism. For now does …\nHydroflow lattice and flow properties, very WIP.\n<code>assert!</code> but returns a [<code>Result&lt;(), String&gt;</code>] instead of …\n<code>assert_eq!</code> but returns a [<code>Result&lt;(), String&gt;</code>] instead of …\nHydroflow’s outer scheduled layer. Deals with …\nHelper utilities for the Hydroflow surface syntax.\nVariadic patterns macro.\nVariadic expressions (values) macro.\nVariadic types macro.\nPull-based operator helpers, i.e. <code>Iterator</code> helpers.\nInsert a key value pair into the join state, currently …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf there are any stored matches from previous calls to …\nThis function does the actual joining part of the join. It …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handoff’s ID. Invalid if used in a different …\nA staten handle’s ID. Invalid if used in a different …\nA subgraph’s ID. Invalid if used in a different …\nModule for the user-facing <code>Context</code> object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModule for the <code>Hydroflow</code> struct and helper items.\nHelper extensions for <code>Hydroflow</code>.\nModule for all <code>Handoff</code>-related items.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module contiains networking code.\nOrganizational module for Hydroflow Send/RecvCtx structs …\nOld query API, where each operator is a single subgraph. …\nModule for <code>Reactor</code>.\nModule for <code>StateHandle</code>, part of the “state API”.\nThis module contains types to work with ticks.\nThe main state of the Hydroflow instance, which is …\nAborts all tasks spawned with <code>Self::spawn_tasks</code>.\nAdds state to the context and returns the handle.\nGets the current stratum nubmer.\nGets the ID of the current subgraph.\nGets the current tick (local time) count.\nGets the timestamp of the beginning of the current tick.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets whether this is the first time this subgraph is being …\nWaits for all tasks spawned with <code>Self::spawn_tasks</code> to …\nRemoves state from the context returns it as an owned heap …\nPrepares an async task to be launched by <code>Self::spawn_tasks</code>.\nSchedules a subgraph.\nSets a hook to modify the state at the end of each tick, …\nLaunches all tasks requested with <code>Self::request_task</code> on …\nReturns an exclusive reference to the state.\nReturns a shared reference to the state.\nReturns a <code>Waker</code> for interacting with async Rust. Waker …\nA Hydroflow graph. Owns, schedules, and runs the compiled …\nAlias for <code>Context::abort_tasks</code>.\nAdds referenceable state into the <code>Hydroflow</code> instance. …\nAdds a new compiled subgraph with the specified inputs and …\nAdds a new compiled subgraph with a variable number of …\nAdds a new compiled subgraph with the specified inputs, …\nAdds a new compiled subgraph with a variable number of …\nGets a exclusive (mut) ref to the internal context, …\nGets the current stratum nubmer.\nGets the current tick (local time) count.\nReturns any diagnostics generated by the surface syntax …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlias for <code>Context::join_tasks</code>.\nCreates a handoff edge and returns the corresponding send …\nReturn a handle to the meta <code>HydroflowGraph</code> if set. The …\nCreate a new empty Hydroflow graph.\nGo to the next stratum which has work available, possibly …\nReturns a reactor for externally scheduling subgraphs, …\nEnqueues subgraphs triggered by external events, blocking …\nEnqueues subgraphs triggered by external events …\nAlias for <code>Context::request_task</code>.\nRuns the dataflow graph forever.\nRuns the dataflow graph forever.\nRuns the dataflow until no more (externally-triggered) …\nRuns the dataflow until no more (externally-triggered) …\nRuns the current stratum of the dataflow until no more …\nRuns the dataflow until the next tick begins. Returns true …\nSchedules a subgraph to be run. See also: …\nSets a hook to modify the state at the end of each tick, …\nMarks an output of a <code>TeeingHandoff</code> as dropped so that no …\nTees a <code>TeeingHandoff</code>.\nEnqueues subgraphs triggered by events without blocking.\nConvenience extension methods for the Hydroflow struct.\nAdds an “input” operator, returning a handle to insert …\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nTrait representing somethign which we can give an item to.\nTrait for handoffs to implement.\nA handle onto the metadata part of a Handoff, with no …\nInner datastructure type.\nWrapper around <code>IntoIterator</code> to avoid trait impl conflicts.\nA Handoff which is part of a “family” of handoffs. …\nTrait representing something which we can attempt to give …\nA Vec-based FIFO handoff.\nHelper to cast an instance of <code>HandoffMeta</code> to <code>Any</code>. In …\nTake the inner datastructure by swapping input and output …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGive a value to the handoff.\nSee <code>CanReceive::give</code>.\nModule for variadic handoff port lists, <code>PortList</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn if the handoff is empty.\nIf this output’s buffer is empty, return true.\nTake the inner datastructure, similar to <code>std::mem::take</code>.\nTry to give a value to the handoff, may return an error if …\nSee <code>TryCanReceive::try_give</code>.\nThe <code>Variadic</code> return type of <code>Self::make_ctx</code>.\nA variadic list of Handoff types, represented using a …\nSealed trait for variadic lists of ports.\nTrait for splitting a list of ports into two.\nThe suffix, second half of the split.\nIteratively/recursively construct a <code>Ctx</code> variadic list.\nIteratively/recursively set the graph metadata for each …\nSplit the port list, returning the prefix and <code>Self::Suffix</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn empty trait used to denote <code>Polarity</code>: either <strong>send</strong> or …\nLightweight ID struct representing an input or output port …\nWrapper around a handoff to differentiate between output …\nAn uninstantiable type used to tag port <code>Polarity</code> as <strong>receive</strong>…\nRecv-specific <code>PortCtx</code>. Input to receive from a handoff.\nRecv-specific variant of <code>Port</code>. An input port.\nAn uninstantiable type used to tag port <code>Polarity</code> as <strong>send</strong>.\nSend-specific <code>PortCtx</code>. Output to send into a handoff.\nSend-specific variant of <code>Port</code>. An output port.\nSee <code>Handoff::borrow_mut_swap</code>.\nSee <code>Handoff::borrow_mut_swap</code>.\nMarks this output of a <code>TeeingHandoff</code> as dropped so that no …\nMarks this output of a <code>TeeingHandoff</code> as dropped so that no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAlias for <code>Handoff::give</code> on the inner <code>H</code>.\nAlias for <code>Handoff::give</code> on the inner <code>H</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>Handoff::take_inner</code>.\nSee <code>Handoff::take_inner</code>.\nTees this <code>TeeingHandoff</code>, given the <code>Hydroflow</code> instance it …\nTees this <code>TeeingHandoff</code>, given the <code>Hydroflow</code> instance it …\nAlias for <code>Handoff::try_give</code> on the inner <code>H</code>.\nAlias for <code>Handoff::try_give</code> on the inner <code>H</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle into a specific super::graph::Hydroflow instance …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert this <code>Reactor</code> into a <code>std::task::Waker</code> for use with …\nTrigger a subgraph as an external event.\nA handle into a particular <code>Hydroflow</code> instance, referring …\nA state handle with the generic type parameter erased, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA single tick duration.\nThe duration between two ticks.\nA point in time during execution on transducer.\nA zero duration\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new TickInstant\nCreate a new <code>TickDuration</code> for the specified tick interval.\nThe length of the duration, measured in ticks.\nDelete all values that exactly match\nDelete all tuples that have the key K\nTerminates the inner <code>Child</code> process when dropped.\nA wrapper christening a closure as a monotonic function\nA wrapper christening a closure as a lattice morphism\nPersist T values\nPersist key-value pairs\nPersit or delete tuples\nPersit or delete key-value pairs\nA framed TCP <code>Sink</code> (sending).\nA framed TCP <code>Stream</code> (receiving).\nA UDP undelimited bytes <code>Sink</code> (sending).\nA UDP undelimited bytes <code>Stream</code> (receiving).\nA framed UDP <code>Sink</code> (sending).\nA framed UDP <code>Stream</code> (receiving).\nA UDP newline-delimited <code>String</code> <code>Sink</code> (sending).\nA UDP newline-delimited <code>String</code> <code>Stream</code> (receivng).\nA UDP length-delimited frame <code>Sink</code> (sending).\nA UDP length-delimited frame <code>Stream</code> (receiving).\nCreate a listening tcp socket, and then as new connections …\nReturns a newline-delimited bytes <code>Sender</code>, <code>Receiver</code>, and …\nThis is the same thing as <code>bind_tcp_bytes</code> except instead of …\nReturns a length-delimited bytes <code>Sink</code>, <code>Stream</code>, and …\nReturns a newline-delimited bytes <code>Sink</code>, <code>Stream</code>, and …\nModule for the <code>Clear</code> trait.\nCollects the immediately available items from the <code>Stream</code> …\nCollects the immediately available items from the <code>Stream</code> …\nThe inverse of <code>bind_tcp</code>.\nThe inverse of <code>bind_tcp_bytes</code>.\nThis is the same thing as <code>connect_tcp_bytes</code> except instead …\nTrait for the <code>demux_enum</code> derive and operator.\nSerialize a message from bytes using bincode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolve the <code>ipv4</code> <code>SocketAddr</code> from an IP or hostname string.\nConverts an iterator into a stream that emits <code>n</code> items at a …\nModule for <code>MonotonicMap</code>.\nA multiset backed by a HashMap\nReturns an <code>Iterator</code> of any immediately available items …\nRun a rust example as a test.\nSerialize a message to bytes using bincode.\nHydroflow Deterministic Simulation Testing Framework\nSort a slice using a key fn which returns references.\nA vector that supports efficient deletion without …\nHelper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …\nHelper creates a TCP <code>Stream</code> and <code>Sink</code> for undelimited …\nHelper creates a TCP <code>Stream</code> and <code>Sink</code> from the given …\nHelper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>str</code>ings delimited …\nHelper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …\nHelper creates a UDP <code>Stream</code> and <code>Sink</code> for undelimited …\nReturns a UDP <code>Stream</code>, <code>Sink</code>, and address for the given …\nHelper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>String</code>s delimited …\nReturns a channel as a (1) unbounded sender and (2) …\nHelper creates a Unix <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …\nHelper creates a Unix <code>Stream</code> and <code>Sink</code> for undelimited …\nHelper creates a Unix <code>Stream</code> and <code>Sink</code> from the given …\nHelper creates a Unix <code>Stream</code> and <code>Sink</code> for <code>str</code>ings …\nUnsync (i.e. single-threaded) synchronization primitives.\nReturns an unsync channel as a (1) sender and (2) receiver …\nWaits for a specific process output before returning.\nA trait for abstracting over the <code>.clear()</code> method available …\nA wrapper struct which implements <code>Clear</code> by setting self to …\nClears the collection without neccesarily freeing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for use with the <code>demux_enum</code> operator.\nBase implementation to constrain that <code>DemuxEnum&lt;SOMETHING&gt;</code> …\nOutput tuple type.\nSpecial case of <code>DemuxEnum</code> for when there is only one …\nPushes self into the corresponding output pusherator in …\nConvert self into it’s single variant tuple Output.\nContains runtime information passed by Hydro Deploy to a …\nDescribes how to connect to a service which is listening …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA map-like interface which in reality only stores one …\nReturns the argument unchanged.\nGets a mutable reference to the inner value. If <code>key</code> is …\nGets a mutable reference to the inner value. If <code>key</code> is …\nInserts the value using the function if new <code>key</code> is …\nCalls <code>U::from(self)</code>.\nCreates a new <code>MonotonicMap</code> initialized with the given …\nA multiset backed by a HashMap\nReturns the argument unchanged.\nInsert item into the multiset. see …\nCalls <code>U::from(self)</code>.\nAn address is a combination of a hostname and an interface …\nA fleet is a collection of hosts in the simulation. It is …\nA host is a single Hydroflow transducer running in the …\nA builder for constructing a host in the simulation.\nA hostname is a unique identifier for a host in the …\nAn inbox is used by a host to receive messages for the …\nA message sender is used to send messages to an inbox on a …\nA message with an delivery address.\nTransducers can send messages to other transducers by …\nUsed in conjunction with the <code>HostBuilder</code> to construct a …\nAdds a new host to the fleet with the given name and …\nBuilds the host with the supplied configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a host by name.\nGet a host by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of HostBuilder for a given hostname,\nCreates a new instance of Fleet.\nCreate a new address with the given hostname and interface …\nCreate a new inbox on the host with the given interface …\nCreates a new outbox on the host with the given interface …\nProcess all network messages in the simulation. This …\nAdvance time on all hosts by a single tick. Returns true …\nRun a single tick on the host’s transducer. Returns true …\nTick all hosts until all hosts are quiescent (i.e. no new …\nSend a message to the inbox on the host.\nSupplies the (mandatory) transducer that runs on this host.\nA vector that supports efficient deletion without …\nDelete all items of a specific value from this vector. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate through all items in the vector in order. Deleted …\nInsert item into the vector, see …\nUnsync single-producer single-consumer channel (i.e. a …\nThe receive half of the channel was explicitly closed or …\nThe data could not be sent on the channel because the …\nReceiving half of an unsync MPSC.\nError returned by the <code>Sender</code>.\nSend half of am unsync MPSC.\nThis enumeration is the list of the possible error …\nCreate a bounded unsync MPSC channel. Panics if capacity …\nCreate an unsync MPSC channel, either bounded (if <code>capacity</code> …\nCloses this receiving end, not allowing more values to be …\nClose this sender. No more messages can be sent from this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this sender or the corresponding <code>Receiver</code> is closed.\nPoll for a value. NOTE: takes <code>&amp;mut self</code> to prevent …\nReceive a value asynchronously.\nAsynchronously sends value to the receiver.\nTries to send the value to the receiver without blocking.\nCreate an unbounded unsync MPSC channel.")