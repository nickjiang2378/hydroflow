searchState.loadedDescShard("hydroflow_plus", 2, "The connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nA bidirectional pipe to read and write bytes in memory.\nReturns the empty <code>Ready</code> set.\nInterest in error events.\nReturns a <code>Ready</code> representing error readiness.\n<code>Empty</code> ignores any data written via <code>AsyncWrite</code>, and will …\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nThe remote host is not reachable.\nReadiness event interest.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nJoins two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> …\nReads lines from an <code>AsyncBufRead</code>.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nReturns a <code>Interest</code> set representing priority completion …\nReturns a <code>Ready</code> representing priority readiness.\nThe operation lacked the necessary privileges to complete.\nInterest in all readable events.\nReturns a <code>Ready</code> representing readable readiness.\nReturns a <code>Ready</code> representing read closed readiness.\nA wrapper around a byte buffer that is incrementally …\nThe readable half of a value returned from <code>split</code>.\nThe filesystem or storage medium is read-only, but a write …\nDescribes the readiness state of an I/O resources.\nAn async reader which yields one byte over and over and …\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nEnumeration of possible methods to seek within an I/O …\nAn async writer which will move data into the void.\nSplitter for the <code>split</code> method.\nStale network file handle.\nSets the offset to the provided number of bytes.\nA handle to the standard error stream of a process.\nA handle to the standard input stream of a process.\nA handle to the standard output stream of a process.\nThe underlying storage (typically, a filesystem) is full.\nStream for the <code>take</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nInterest in all writable events.\nReturns a <code>Ready</code> representing writable readiness.\nReturns a <code>Ready</code> representing write closed readiness.\nThe operation needs to block to complete, but the blocking …\nThe writable half of a value returned from <code>split</code>.\nAn error returned when an operation could not be completed …\nAdd together two <code>Interest</code> values.\nAdvances the size of the filled region of the buffer.\nAsserts that the first <code>n</code> unfilled bytes of the buffer are …\nReturns a reference to the internally buffered data.\nReturns a reference to the internally buffered data.\nReturns the total capacity of the buffer.\nCreates a new <code>AsyncRead</code> instance that chains this stream …\nClears the buffer, resetting the filled region to empty.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nTells this buffer that <code>amt</code> bytes have been consumed from …\nAsynchronously copies the entire contents of a reader into …\nCopies data in both directions between <code>a</code> and <code>b</code>.\nCopies data in both directions between <code>a</code> and <code>b</code> using …\nAsynchronously copies the entire contents of a reader into …\nAttempt to downcast the custom boxed error to <code>E</code>.\nCreate a new pair of <code>DuplexStream</code>s that act like a pair of …\nCreates a value that is always at EOF for reads, and …\nReturns the contents of the internal buffer, filling it …\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nFlushes this output stream, ensuring that all …\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a <code>serde_json::Error</code> into an <code>io::Error</code>.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nReturns a mutable reference to the inner error wrapped by …\nGets a mutable reference to the underlying reader.\nObtains a mutable reference to the underlying reader.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying I/O object.\nGets a mutable reference to the underlying reader.\nGets a pinned mutable reference to the underlying reader.\nGets a pinned mutable reference to the underlying writer.\nGets a pinned mutable reference to the underlying I/O …\nGets a pinned mutable reference to the underlying reader.\nReturns a reference to the inner error wrapped by this …\nGets a reference to the underlying reader.\nObtains a reference to the underlying reader.\nGets a reference to the underlying writer.\nGets a reference to the underlying I/O object.\nGets a reference to the underlying reader.\nReturns a mutable reference to the unfilled part of the …\nReturns a mutable reference to the first <code>n</code> bytes of the …\nReturns a shared reference to the initialized portion of …\nReturns a mutable reference to the initialized portion of …\nReturns a mutable reference to the entire buffer, without …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits this <code>Join</code> back into its <code>AsyncRead</code> and <code>AsyncWrite</code> …\nConsumes the <code>Error</code>, returning its inner error (if any).\nConsumes the <code>Take</code>, returning the wrapped reader.\nUnwraps this <code>Lines&lt;R&gt;</code>, returning the underlying reader.\nConsumes this <code>BufWriter</code>, returning the underlying writer.\nConsumes this <code>BufStream</code>, returning the underlying I/O …\nConsumes this <code>BufReader</code>, returning the underlying reader.\nReturns true if <code>Ready</code> is the empty set.\nReturns true if the value includes error interest.\nReturns <code>true</code> if the value includes error <code>readiness</code>.\nChecks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …\nChecks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …\nReturns true if the value includes priority interest.\nReturns <code>true</code> if the value includes priority <code>readiness</code>.\nReturns <code>true</code> if the value includes read-closed <code>readiness</code>.\nReturns true if the value includes readable interest.\nReturns <code>true</code> if the value includes <code>readable</code>.\nReturns true if the value includes writable interest.\nReturns <code>true</code> if the value includes writable <code>readiness</code>.\nReturns <code>true</code> if the value includes write-closed <code>readiness</code>.\nDetermines if this writer has an efficient …\nJoin two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> into …\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the remaining number of bytes that can be read …\nReturns a stream over the lines of this reader. This …\nCreates a new <code>ReadBuf</code> from a fully initialized buffer.\nCreates a new I/O error from a known kind of error as well …\nCreates a new <code>BufWriter</code> with a default buffer capacity. …\nWraps a type in both <code>BufWriter</code> and <code>BufReader</code>.\nCreates a new <code>BufReader</code> with a default buffer capacity. …\nReturns the next line in the stream.\nReturns the next segment in the stream.\nCreates a new I/O error from an arbitrary error payload.\nWaits for a seek operation to complete.\nAttempts to return the contents of the internal buffer, …\nAttempts to flush the object, ensuring that any buffered …\nPolls for the next line in the stream.\nPolls for the next segment in the stream.\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nInitiates or attempts to shut down this writer, returning …\nAttempt to write bytes from <code>buf</code> into the object.\nLike <code>poll_write</code>, except that it writes from a slice of …\nAppends data to the buffer, advancing the written position …\nReturns the OS error that this error represents (if any).\nPulls some bytes from this source into the specified …\nPulls some bytes from this source into the specified …\nReads the exact number of bytes required to fill <code>buf</code>.\nReads an 32-bit floating point type in big-endian order …\nReads an 32-bit floating point type in little-endian order …\nReads an 64-bit floating point type in big-endian order …\nReads an 64-bit floating point type in little-endian order …\nReads an signed 128-bit integer in big-endian order from …\nReads an signed 128-bit integer in little-endian order …\nReads a signed 16-bit integer in big-endian order from the …\nReads a signed 16-bit integer in little-endian order from …\nReads a signed 32-bit integer in big-endian order from the …\nReads a signed 32-bit integer in little-endian order from …\nReads an signed 64-bit integer in big-endian order from the\nReads an signed 64-bit integer in little-endian order from …\nReads a signed 8 bit integer from the underlying reader.\nReads all bytes until a newline (the 0xA byte) is reached, …\nReads all bytes until EOF in this source, placing them …\nReads all bytes until EOF in this source, appending them …\nReads an unsigned 128-bit integer in big-endian order from …\nReads an unsigned 128-bit integer in little-endian order …\nReads an unsigned 16-bit integer in big-endian order from …\nReads an unsigned 16-bit integer in little-endian order …\nReads an unsigned 32-bit integer in big-endian order from …\nReads an unsigned 32-bit integer in little-endian order …\nReads an unsigned 64-bit integer in big-endian order from …\nReads an unsigned 64-bit integer in little-endian order …\nReads an unsigned 8 bit integer from the underlying reader.\nReads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …\nReturns a reference to the inner reader.\nReturns a mutable reference to the inner reader.\nReturns a pinned mutable reference to the inner reader.\nReturns the number of bytes at the end of the slice that …\nRemove <code>Interest</code> from <code>self</code>.\nCreates an instance of an async reader that infinitely …\nCreates a future which will rewind to the beginning of the …\nCreates a future which will seek an IO object, and then …\nSets the size of the filled region of the buffer.\nSets the number of bytes that can be read before this …\nShuts down the output stream, ensuring that the value can …\nCreates an instance of an async writer which will …\nSplits a single value implementing <code>AsyncRead + AsyncWrite</code> …\nReturns a stream of the contents of this reader split on …\nAttempts to seek to an offset, in bytes, in a stream.\nConstructs a new handle to the standard error of the …\nConstructs a new handle to the standard input of the …\nConstructs a new handle to the standard output of the …\nCreates a future which will return the current seek …\nReturns a new <code>ReadBuf</code> comprised of the unfilled section up …\nCreates an adaptor which reads at most <code>limit</code> bytes from it.\nReturns a mutable reference to the unfilled part of the …\nCreates a new <code>ReadBuf</code> from a fully uninitialized buffer.\nAsynchronous IO structures specific to Unix-like operating …\nReunites with a previously split <code>WriteHalf</code>.\nCreates a new <code>BufWriter</code> with the specified buffer capacity.\nCreates a <code>BufStream</code> with the specified <code>BufReader</code> capacity …\nCreates a new <code>BufReader</code> with the specified buffer capacity.\nWrites a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.\nWrites a buffer into this writer, advancing the buffer’s …\nWrites an 32-bit floating point type in big-endian order …\nWrites an 32-bit floating point type in little-endian …\nWrites an 64-bit floating point type in big-endian order …\nWrites an 64-bit floating point type in little-endian …\nWrites an signed 128-bit integer in big-endian order to the\nWrites an signed 128-bit integer in little-endian order to …\nWrites a signed 16-bit integer in big-endian order to the …\nWrites a signed 16-bit integer in little-endian order to …\nWrites a signed 32-bit integer in big-endian order to the …\nWrites a signed 32-bit integer in little-endian order to …\nWrites an signed 64-bit integer in big-endian order to the …\nWrites an signed 64-bit integer in little-endian order to …\nWrites a signed 8-bit integer to the underlying writer.\nWrites an unsigned 128-bit integer in big-endian order to …\nWrites an unsigned 128-bit integer in little-endian order …\nWrites an unsigned 16-bit integer in big-endian order to …\nWrites an unsigned 16-bit integer in little-endian order …\nWrites an unsigned 32-bit integer in big-endian order to …\nWrites an unsigned 32-bit integer in little-endian order …\nWrites an unsigned 64-bit integer in big-endian order to …\nWrites an unsigned 64-bit integer in little-endian order …\nWrites an unsigned 8-bit integer to the underlying writer.\nLike <code>write</code>, except that it writes from a slice of buffers.\nReturns a reference to the inner writer.\nReturns a mutable reference to the inner writer.\nReturns a pinned mutable reference to the inner writer.\nAssociates an IO object backed by a Unix file descriptor …\nRepresents an IO-ready event detected on a particular file …\nRepresents an IO-ready event detected on a particular file …\nError returned by <code>try_new</code> or <code>try_with_interest</code>.\nThe error type returned by <code>try_io</code>.\nReads or writes from the file descriptor using a …\nReads or writes from the file descriptor using a …\nIndicates to tokio that the file descriptor is no longer …\nIndicates to tokio that the file descriptor is no longer …\nIndicates to tokio that the file descriptor no longer has …\nIndicates to tokio that the file descriptor no longer has …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a shared reference to the backing object of the …\nReturns a shared reference to the backing object of the …\nReturns a mutable reference to the backing object of the …\nReturns a mutable reference to the backing object of this …\nReturns a mutable reference to the inner <code>AsyncFd</code>.\nReturns a shared reference to the backing object of this …\nReturns a shared reference to the inner <code>AsyncFd</code>.\nReturns a shared reference to the inner <code>AsyncFd</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeregisters this file descriptor and returns ownership of …\nReturns the original object passed to <code>try_new</code> or …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nPolls for read readiness.\nPolls for read readiness.\nPolls for write readiness.\nPolls for write readiness.\nWaits for the file descriptor to become readable, …\nWaits for the file descriptor to become readable, …\nWaits for any of the requested ready states, returning a …\nGet the <code>Ready</code> value associated with this guard.\nGet the <code>Ready</code> value associated with this guard.\nWaits for any of the requested ready states, returning a …\nThis method should be invoked when you intentionally want …\nThis method should be invoked when you intentionally want …\nPerforms the provided IO operation.\nPerforms the provided IO operation.\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nCreates an <code>AsyncFd</code> backed by (and taking ownership of) an …\nWaits for the file descriptor to become writable, …\nWaits for the file descriptor to become writable, …\nA TCP socket server, listening for connections.\nA TCP socket that has not yet been converted to a <code>TcpStream</code>…\nA TCP stream between a local and a remote socket.\nConverts or resolves without blocking to one or more …\nA UDP socket.\nAn I/O object representing a Unix datagram socket.\nA Unix socket which can accept connections from other Unix …\nA Unix socket that has not yet been converted to a …\nA structure representing a connected Unix socket.\nAccepts a new incoming connection from this listener.\nAccepts a new incoming connection to this listener.\nReads or writes from the socket using a user-provided IO …\nReads or writes from the socket using a user-provided IO …\nReads or writes from the socket using a user-provided IO …\nReads or writes from the socket using a user-provided IO …\nCreates a new <code>TcpListener</code>, which will be bound to the …\nBinds the socket to the given address.\nThis function will create a new UDP socket and attempt to …\nCreates a new <code>UnixDatagram</code> bound to the specified path.\nCreates a new <code>UnixListener</code> bound to the specified path.\nBinds the socket to the given address.\nSets the value for the <code>SO_BINDTODEVICE</code> option on this …\nSets the value for the <code>SO_BINDTODEVICE</code> option on this …\nGets the value of the <code>SO_BROADCAST</code> option for this socket.\nEstablishes a TCP connection with a peer at the specified …\nOpens a TCP connection to a remote host.\nConnects the UDP socket setting the default destination …\nConnects the socket to the specified address.\nEstablishes a Unix connection with a peer at the specified …\nConnects to the socket named by <code>path</code>.\nConverts the socket into a <code>UnixDatagram</code>.\nGets the value for the <code>SO_BINDTODEVICE</code> option on this …\nGets the value for the <code>SO_BINDTODEVICE</code> option on this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>RawFd</code> to a <code>TcpSocket</code>.\nCreates new <code>TcpListener</code> from a <code>std::net::TcpListener</code>.\nCreates new <code>TcpStream</code> from a <code>std::net::TcpStream</code>.\nCreates new <code>UdpSocket</code> from a previously bound …\nCreates new <code>UnixDatagram</code> from a …\nCreates new <code>UnixListener</code> from a …\nCreates new <code>UnixStream</code> from a …\nConverts a <code>std::net::TcpStream</code> into a <code>TcpSocket</code>. The …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits a <code>TcpStream</code> into a read half and a write half, …\nSplits a <code>UnixStream</code> into a read half and a write half, …\nTurns a <code>tokio::net::TcpListener</code> into a …\nTurns a <code>tokio::net::TcpStream</code> into a <code>std::net::TcpStream</code>.\nTurns a <code>tokio::net::UdpSocket</code> into a <code>std::net::UdpSocket</code>.\nTurns a <code>tokio::net::UnixDatagram</code> into a …\nTurns a <code>tokio::net::UnixListener</code> into a …\nTurns a <code>tokio::net::UnixStream</code> into a …\nExecutes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.\nGets the value of the <code>SO_KEEPALIVE</code> option on this socket.\nExecutes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.\nReads the linger duration for this socket by getting the …\nReads the linger duration for this socket by getting the …\nConverts the socket into a <code>TcpListener</code>.\nConverts the socket into a <code>UnixListener</code>.\nReturns the local address that this listener is bound to.\nGets the local address of this socket.\nReturns the local address that this stream is bound to.\nReturns the local address that this socket is bound to.\nReturns the local address that this socket is bound to.\nReturns the local socket address of this listener.\nReturns the socket address of the local half of this …\nPerforms a DNS resolution.\nGets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nCreates a new Unix datagram socket.\nCreates a new Unix stream socket.\nCreates a new socket configured for IPv4.\nCreates a new socket configured for IPv6.\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nGets the value of the <code>TCP_NODELAY</code> option on this socket.\nCreates an unnamed pair of connected sockets.\nCreates an unnamed pair of connected sockets.\nReceives data on the socket from the remote address to …\nReceives data from the socket, without removing it from …\nRetrieve the sender of the data at the head of the input …\nReturns the remote address that this stream is connected …\nReturns the socket address of the remote peer this socket …\nReturns the address of this socket’s peer.\nReturns the socket address of the remote half of this …\nReturns effective credentials of the process which called …\nPolls to accept a new incoming connection to this listener.\nPolls to accept a new incoming connection to this listener.\nAttempts to receive data on the socket, without removing …\nReceives data from the socket, without removing it from …\nRetrieve the sender of the data at the head of the input …\nPolls for read readiness.\nPolls for read readiness.\nAttempts to receive a single datagram message on the …\nAttempts to receive a single datagram message on the …\nAttempts to receive a single datagram on the socket.\nAttempts to receive a single datagram on the specified …\nPolls for read/receive readiness.\nPolls for read/receive readiness.\nAttempts to send data on the socket to the remote address …\nAttempts to send data on the socket to the remote address …\nPolls for write/send readiness.\nPolls for write/send readiness.\nAttempts to send data on the socket to a given address.\nAttempts to send data to the specified address.\nPolls for write readiness.\nPolls for write readiness.\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nReceives a single datagram message on the socket from the …\nReceives data from the socket.\nReceives a single datagram message on the socket from the …\nReceives data from the socket from the address to which it …\nReceives a single datagram message on the socket, …\nReceives from the socket, advances the buffer’s internal …\nReturns the size of the TCP receive buffer for this socket.\nReceives a single datagram message on the socket. On …\nReceives data from the socket.\nRetrieves the value set for <code>SO_REUSEADDR</code> on this socket.\nAllows the socket to bind to an in-use port. Only …\nSends data on the socket to the remote address that the …\nSends data on the socket to the socket’s peer.\nReturns the size of the TCP send buffer for this socket.\nSends data on the socket to the given address. On success, …\nSends data on the socket to the specified address.\nSets the value of the <code>SO_BROADCAST</code> option for this socket.\nSets value for the <code>SO_KEEPALIVE</code> option on this socket.\nSets the linger duration of this socket by setting the …\nSets the linger duration of this socket by setting the …\nSets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the value of the <code>TCP_NODELAY</code> option on this socket.\nSets the size of the TCP receive buffer on this socket.\nAllows the socket to bind to an in-use address.\nAllows the socket to bind to an in-use port. Only …\nSets the size of the TCP send buffer on this socket.\nSets the value for the <code>IP_TOS</code> option on this socket.\nSets the value for the <code>IP_TOS</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nSets the value for the <code>IP_TTL</code> option on this socket.\nShuts down the read, write, or both halves of this …\nSplits a <code>TcpStream</code> into a read half and a write half, …\nSplits a <code>UnixStream</code> into a read half and a write half, …\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nReturns the value of the <code>SO_ERROR</code> option.\nTCP utility types.\nGets the value of the <code>IP_TOS</code> option for this socket.\nGets the value of the <code>IP_TOS</code> option for this socket.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the Tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nConsumes stream, returning the tokio I/O object.\nTries to read or write from the socket using a …\nTries to read or write from the socket using a …\nTries to read or write from the socket using a …\nTries to read or write from the socket using a …\nTries to receive data on the socket without removing it …\nTry to retrieve the sender of the data at the head of the …\nTries to read data from the stream into the provided …\nTry to read data from the stream into the provided buffer, …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to receive a single datagram message on the socket …\nTries to receive a datagram from the peer without waiting.\nTries to receive data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to receive a single datagram message on the socket. …\nTries to receive data from the socket without waiting.\nTries to receive a single datagram message on the socket. …\nTries to receive data from the socket without waiting.\nTries to send data on the socket to the remote address to …\nTries to send a datagram to the peer without waiting.\nTries to send data on the socket to the given address, but …\nTries to send a datagram to the peer without waiting.\nTry to write a buffer to the stream, returning how many …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nTries to write several buffers to the stream, returning …\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nCreates a new <code>UnixDatagram</code> which is not bound to any …\nUnix specific network types.\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nOwned read half of a <code>TcpStream</code>, created by <code>into_split</code>.\nOwned write half of a <code>TcpStream</code>, created by <code>into_split</code>.\nBorrowed read half of a <code>TcpStream</code>, created by <code>split</code>.\nError indicating that two halves were not from the same …\nBorrowed write half of a <code>TcpStream</code>, created by <code>split</code>.\nDestroys the write half, but don’t close the write half …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local address that this stream is bound to.\nReturns the local address that this stream is bound to.\nReturns the local address that this stream is bound to.\nReturns the local address that this stream is bound to.\nReceives data on the socket from the remote address to …\nReceives data on the socket from the remote address to …\nReturns the remote address that this stream is connected …\nReturns the remote address that this stream is connected …\nReturns the remote address that this stream is connected …\nReturns the remote address that this stream is connected …\nAttempts to receive data on the socket, without removing …\nAttempt to receive data on the socket, without removing …\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nAttempts to put the two halves of a <code>TcpStream</code> back …\nAttempts to put the two halves of a <code>TcpStream</code> back …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write a buffer to the stream, returning how many …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nTries to write several buffers to the stream, returning …\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nOwned read half of a <code>UnixStream</code>, created by <code>into_split</code>.\nOwned write half of a <code>UnixStream</code>, created by <code>into_split</code>.\nBorrowed read half of a <code>UnixStream</code>, created by <code>split</code>.\nError indicating that two halves were not from the same …\nAn address associated with a Tokio Unix socket.\nCredentials of a process.\nBorrowed write half of a <code>UnixStream</code>, created by <code>split</code>.\nReturns the contents of this address if it is a <code>pathname</code> …\nDestroys the write half, but don’t close the write half …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets GID (group ID) of the process.\nA type representing user ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the address is unnamed.\nReturns the socket address of the local half of this …\nReturns the socket address of the local half of this …\nReturns the socket address of the local half of this …\nReturns the socket address of the local half of this …\nReturns the socket address of the remote half of this …\nReturns the socket address of the remote half of this …\nReturns the socket address of the remote half of this …\nReturns the socket address of the remote half of this …\nGets PID (process ID) of the process.\nA type representing group ID.\nUnix pipe types.\nWaits for the socket to become readable.\nWaits for the socket to become readable.\nWait for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nAttempts to put the two halves of a <code>UnixStream</code> back …\nAttempts to put the two halves of a <code>UnixStream</code> back …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to read data from the stream into the provided …\nTries to write a buffer to the stream, returning how many …\nTries to write a buffer to the stream, returning how many …\nTries to write several buffers to the stream, returning …\nTries to write several buffers to the stream, returning …\nGets UID (user ID) of the process.\nA type representing process and process group IDs.\nWaits for the socket to become writable.\nWaits for the socket to become writable.\nOptions and flags which can be used to configure how a …\nReading end of a Unix pipe.\nWriting end of a Unix pipe.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Sender</code> from a <code>File</code>.\nCreates a new <code>Receiver</code> from a <code>File</code>.\nCreates a new <code>Sender</code> from a <code>File</code> without checking pipe …\nCreates a new <code>Receiver</code> from a <code>File</code> without checking pipe …\nCreates a new <code>Sender</code> from an <code>OwnedFd</code>.\nCreates a new <code>Receiver</code> from an <code>OwnedFd</code>.\nCreates a new <code>Sender</code> from an <code>OwnedFd</code> without checking pipe …\nCreates a new <code>Receiver</code> from an <code>OwnedFd</code> without checking …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the pipe into an <code>OwnedFd</code> in blocking mode.\nConverts the pipe into an <code>OwnedFd</code> in blocking mode.\nConverts the pipe into an <code>OwnedFd</code> in nonblocking mode.\nConverts the pipe into an <code>OwnedFd</code> in nonblocking mode.\nCreates a blank new set of options ready for configuration.\nCreates a <code>Receiver</code> from a FIFO file with the options …\nCreates a <code>Sender</code> from a FIFO file with the options …\nCreates a new anonymous Unix pipe.\nPolls for read readiness.\nPolls for write readiness.\nSets the option for read-write access.\nWaits for the pipe to become readable.\nWaits for any of the requested ready states.\nWaits for any of the requested ready states.\nTries to read data from the pipe into the provided buffer, …\nTries to read data from the pipe into the provided buffer, …\nTries to read data from the pipe into the provided …\nTries to write a buffer to the pipe, returning how many …\nTries to write several buffers to the pipe, returning how …\nSets the option to skip the check for FIFO file type.\nWaits for the pipe to become writable.\nRepresentation of a child process spawned onto an event …\nThe standard error stream for spawned children.\nThe standard input stream for spawned children.\nThe standard output stream for spawned children.\nThis structure mimics the API of <code>std::process::Command</code> …\nAdds an argument to pass to the program.\nSets executable argument.\nAdds multiple arguments to pass to the program.\nCheaply convert to a <code>&amp;std::process::Command</code> for places …\nCheaply convert to a <code>&amp;mut std::process::Command</code> for places …\nSets the working directory for the child process.\nInserts or updates an environment variable mapping.\nClears the entire environment map for the child process.\nRemoves an environment variable mapping.\nAdds or updates multiple environment variable mappings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an asynchronous <code>ChildStdin</code> from a synchronous one.\nCreates an asynchronous <code>ChildStdout</code> from a synchronous one.\nCreates an asynchronous <code>ChildStderr</code> from a synchronous one.\nSimilar to <code>uid</code> but sets the group ID of the child process. …\nReturns the OS-assigned process identifier associated with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into <code>OwnedFd</code>.\nConvert into <code>OwnedFd</code>.\nConvert into <code>OwnedFd</code>.\nForces the child to exit.\nControls whether a <code>kill</code> operation should be invoked on a …\nConstructs a new <code>Command</code> for launching the program at path …\nExecutes the command as a child process, waiting for it to …\nSchedules a closure to be run just before the <code>exec</code> …\nExecutes the command as a child process, returning a …\nAttempts to force the child to exit, but does not wait for …\nExecutes the command as a child process, waiting for it to …\nSets configuration for the child process’s standard …\nThe handle for reading from the child’s standard error …\nSets configuration for the child process’s standard …\nThe handle for writing to the child’s standard input …\nSets configuration for the child process’s standard …\nThe handle for reading from the child’s standard output …\nAttempts to collect the exit status of the child if it has …\nSets the child process’s user ID. This translates to a …\nWaits for the child to exit completely, returning the …\nReturns a future that will resolve to an <code>Output</code>, …\nBuilds Tokio Runtime with custom configuration values.\nThe flavor that executes all tasks on the current thread.\nRuntime context guard.\nHandle to the runtime.\nThe flavor that executes tasks across multiple threads.\nThe Tokio runtime.\nThe flavor of a <code>Runtime</code>.\nHandle to the runtime’s metrics.\nError returned by <code>try_current</code> when no Runtime has been …\nRuns a future to completion on this <code>Handle</code>’s associated …\nRuns a future to completion on the Tokio runtime. This is …\nCreates the configured <code>Runtime</code>.\nReturns a <code>Handle</code> view over the currently running <code>Runtime</code>.\nEnables both I/O and time drivers.\nEnables the I/O driver.\nEnables the time driver.\nEnters the runtime context. This allows you to construct …\nEnters the runtime context.\nSets the number of scheduler ticks after which the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the number of scheduler ticks after which the …\nReturns a handle to the runtime’s spawner.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the call failed because there is currently …\nReturns true if the call failed because the Tokio context …\nSpecifies the limit for additional threads spawned by the …\nEnables the I/O driver and configures the max number of …\nReturns a view that lets you get information about how the …\nReturns a view that lets you get information about how the …\nCreates a new runtime instance with default configuration …\nReturns a new builder with the current thread scheduler …\nReturns a new builder with the multi thread scheduler …\nReturns the current number of alive tasks in the runtime.\nReturns the number of worker threads used by the runtime.\nExecutes function <code>f</code> just before a thread is parked (goes …\nExecutes function <code>f</code> after each thread is started but …\nExecutes function <code>f</code> before each thread stops.\nExecutes function <code>f</code> just after a thread unparks (starts …\nReturns the flavor of the current <code>Runtime</code>.\nShuts down the runtime, without waiting for any spawned …\nShuts down the runtime, waiting for at most <code>duration</code> for …\nSpawns a future onto the Tokio runtime.\nSpawns a future onto the Tokio runtime.\nRuns the provided function on an executor dedicated to …\nRuns the provided function on an executor dedicated to …\nSets a custom timeout for a thread in the blocking pool.\nSets name of threads spawned by the <code>Runtime</code>’s thread …\nSets a function used to generate the name of threads …\nSets the stack size (in bytes) for worker threads.\nReturns a Handle view over the currently running Runtime\nSets the number of worker threads the <code>Runtime</code> will use.\nCompletes when a “ctrl-c” notification is sent to the …\nUnix-specific types for signal handling.\nAn listener for receiving a particular type of OS signal.\nRepresents the specific kind of signal to listen for.\nRepresents the <code>SIGALRM</code> signal.\nGet the signal’s numeric value.\nRepresents the <code>SIGCHLD</code> signal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAllows for listening to any valid OS signal.\nRepresents the <code>SIGHUP</code> signal.\nRepresents the <code>SIGINT</code> signal.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents the <code>SIGIO</code> signal.\nRepresents the <code>SIGPIPE</code> signal.\nPolls to receive the next signal notification event, …\nRepresents the <code>SIGQUIT</code> signal.\nReceives the next signal notification event.\nCreates a new listener which will receive notifications …\nRepresents the <code>SIGTERM</code> signal.\nRepresents the <code>SIGUSR1</code> signal.\nRepresents the <code>SIGUSR2</code> signal.\nRepresents the <code>SIGWINCH</code> signal.\nError returned from the <code>Semaphore::acquire</code> function.\nThe cell was already initialized when <code>OnceCell::set</code> was …\nA barrier enables multiple tasks to synchronize the …\nA <code>BarrierWaitResult</code> is returned by <code>wait</code> when all tasks in …\nThe semaphore has been closed and cannot issue new permits.\nThe cell is currently being initialized.\nThe maximum number of permits which a semaphore can hold. …\nA handle to a held <code>Mutex</code> that has had a function applied …\nAn asynchronous <code>Mutex</code>-like type.\nA handle to a held <code>Mutex</code>. The guard can be held across any …\nThe semaphore has no available permits.\nNotifies a single task to wake up.\nA thread-safe cell that can be written to only once.\nA owned handle to a held <code>Mutex</code> that has had a function …\nAn owned handle to a held <code>Mutex</code>.\nOwned RAII structure used to release the exclusive write …\nOwned RAII structure used to release the shared read …\nOwned RAII structure used to release the exclusive write …\nAn owned permit from the semaphore.\nAn asynchronous reader-writer lock.\nRAII structure used to release the exclusive write access …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nCounting semaphore performing asynchronous permit …\nA permit from the semaphore.\nErrors that can be returned from <code>OnceCell::set</code>.\nError returned from the <code>Semaphore::try_acquire</code> function.\nError returned from the <code>Mutex::try_lock</code>, <code>RwLock::try_read</code> …\nAcquires a permit from the semaphore.\nAcquires <code>n</code> permits from the semaphore.\nAcquires <code>n</code> permits from the semaphore.\nAcquires a permit from the semaphore.\nAdds <code>n</code> new permits to the semaphore.\nReturns the current number of available permits.\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nBlockingly locks this <code>RwLock</code> with shared read access.\nBlockingly locks this <code>RwLock</code> with exclusive write access.\nA multi-producer, multi-consumer broadcast queue. Each …\nCloses the semaphore.\nCreates a new lock in an unlocked state ready for use.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nCreates a new empty <code>OnceCell</code> instance.\nCreate a new <code>Notify</code>, initialized without a permit.\nCreates a new semaphore with the initial number of permits.\nCreates a new <code>OnceCell</code> that contains the provided value.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …\nAtomically downgrades a write lock into a read lock …\nAtomically downgrades a write lock into a read lock …\nMakes a new <code>OwnedRwLockReadGuard</code> for a component of the …\nMakes a new <code>RwLockReadGuard</code> for a component of the locked …\nForgets the permit <strong>without</strong> releasing it back to the …\nForgets the permit <strong>without</strong> releasing it back to the …\nDecrease a semaphore’s permits by a maximum of <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNamed future types.\nReturns a reference to the value currently stored in the …\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the value currently stored …\nGets the value currently in the <code>OnceCell</code>, or initialize it …\nGets the value currently in the <code>OnceCell</code>, or initialize it …\nReturns <code>true</code> if the <code>OnceCell</code> currently contains a value, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the mutex, returning the underlying data.\nConsumes the lock, returning the underlying data.\nTakes the value from the cell, destroying the cell in the …\nConverts this <code>OwnedRwLockWriteGuard</code> into an …\nConverts this <code>RwLockWriteGuard</code> into an …\nWhether <code>SetError</code> is <code>SetError::AlreadyInitializedError</code>.\nReturns true if the semaphore is closed\nWhether <code>SetError</code> is <code>SetError::InitializingError</code>\nReturns <code>true</code> if this task from wait is the “leader task…\nLocks this mutex, causing the current task to yield until …\nLocks this mutex, causing the current task to yield until …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>OwnedMappedMutexGuard</code> for a component of the …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>OwnedMappedMutexGuard</code> for a component of the …\nMakes a new <code>OwnedRwLockReadGuard</code> for a component of the …\nMakes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …\nMakes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …\nMakes a new <code>RwLockReadGuard</code> for a component of the locked …\nMakes a new <code>RwLockMappedWriteGuard</code> for a component of the …\nMakes a new <code>RwLockMappedWriteGuard</code> for a component of the …\nMerge two <code>SemaphorePermit</code> instances together, consuming …\nMerge two <code>OwnedSemaphorePermit</code> instances together, …\nA multi-producer, single-consumer queue for sending values …\nReturns a reference to the original <code>Mutex</code>.\nReturns a reference to the original <code>Arc&lt;Mutex&gt;</code>.\nCreates a new lock in an unlocked state ready for use.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nCreates a new empty <code>OnceCell</code> instance.\nCreates a new barrier that can block a given number of …\nCreate a new <code>Notify</code>, initialized without a permit.\nCreates a new semaphore with the initial number of permits.\nCreates a new <code>OnceCell</code> that contains the provided value, …\nWait for a notification.\nNotifies the last waiting task.\nNotifies the first waiting task.\nNotifies all waiting tasks.\nReturns the number of permits held by <code>self</code>.\nReturns the number of permits held by <code>self</code>.\nA one-shot channel is used for sending a single message …\nLocks this <code>RwLock</code> with shared read access, causing the …\nLocks this <code>RwLock</code> with shared read access, causing the …\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nReturns the <code>Semaphore</code> from which this permit was acquired.\nSets the value of the <code>OnceCell</code> to the given value if the …\nSplits <code>n</code> permits from <code>self</code> and returns a new …\nSplits <code>n</code> permits from <code>self</code> and returns a new …\nTakes ownership of the current value, leaving the cell …\nTries to acquire a permit from the semaphore.\nTries to acquire <code>n</code> permits from the semaphore.\nTries to acquire <code>n</code> permits from the semaphore.\nTries to acquire a permit from the semaphore.\nAttempts to make a new <code>OwnedRwLockReadGuard</code> for a …\nAttempts to make a new <code>RwLockReadGuard</code> for a component of …\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make a new <code>OwnedMappedMutexGuard</code> for a …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make a new <code>OwnedMappedMutexGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockReadGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …\nAttempts to make a new <code>RwLockReadGuard</code> for a component of …\nAttempts to make a new <code>RwLockMappedWriteGuard</code> for a …\nAttempts to make a new <code>RwLockMappedWriteGuard</code> for a …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nDoes not resolve until all tasks have rendezvoused here.\nA multi-producer, multi-consumer channel that only retains …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nReceiving-half of the <code>broadcast</code> channel.\nSending-half of the <code>broadcast</code> channel.\nBlocking receive to call outside of asynchronous contexts.\nCreate a bounded, multi-producer, multi-consumer channel …\nBroadcast error types\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if there are no queued values.\nReturns true if there aren’t any messages in the channel …\nReturns the number of queued values.\nReturns the number of messages that were sent into the …\nCreates the sending-half of the <code>broadcast</code> channel.\nReturns the number of active receivers.\nReceives the next value for this receiver.\nRe-subscribes to the channel starting from the current …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nAttempts to send a value to all active <code>Receiver</code> handles, …\nCreates a new <code>Receiver</code> handle that will receive values …\nAttempts to return a pending value on this receiver …\nThere are no more active senders implying no further …\nThere are no more active senders implying no further …\nThe channel is currently empty. There are still active …\nThe receiver lagged too far behind. Attempting to receive …\nThe receiver lagged too far behind and has been forcibly …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nError returned by the <code>send</code> function on a <code>Sender</code>.\nAn error returned from the <code>try_recv</code> function on a <code>Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFuture returned from <code>Notify::notified()</code>.\nAdds this future to the list of futures that are ready to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOwned permit to send one value into the channel.\nPermits to send one value into the channel.\nAn <code>Iterator</code> of <code>Permit</code> that can be used to hold <code>n</code> slots in …\nReceives values from the associated <code>Sender</code>.\nSends values to the associated <code>Receiver</code>.\nReceive values from the associated <code>UnboundedSender</code>.\nSend values to the associated <code>UnboundedReceiver</code>.\nA sender that does not prevent the channel from being …\nAn unbounded sender that does not prevent the channel from …\nBlocking receive to call outside of asynchronous contexts.\nBlocking receive to call outside of asynchronous contexts.\nBlocking send to call outside of asynchronous contexts.\nReturns the current capacity of the channel.\nReturns the current capacity of the channel.\nCreates a bounded mpsc channel for communicating between …\nCloses the receiving half of a channel without dropping it.\nCloses the receiving half of a channel, without dropping …\nCompletes when the receiver has dropped.\nCompletes when the receiver has dropped.\nConverts the <code>Sender</code> to a <code>WeakSender</code> that does not count …\nConverts the <code>UnboundedSender</code> to a <code>WeakUnboundedSender</code> that …\nChannel error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nChecks if a channel is closed.\nChecks if the channel has been closed. This happens when …\nChecks if a channel is closed.\nChecks if a channel is empty.\nChecks if a channel is empty.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nReturns the maximum buffer capacity of the channel.\nReturns the maximum buffer capacity of the channel.\nPolls to receive the next message on this channel.\nPolls to receive the next message on this channel.\nPolls to receive multiple messages on this channel, …\nPolls to receive multiple messages on this channel, …\nReceives the next value for this receiver.\nReceives the next value for this receiver.\nReceives the next values for this receiver and extends …\nReceives the next values for this receiver and extends …\nReleases the reserved capacity <em>without</em> sending a message, …\nWaits for channel capacity. Once capacity to send one …\nWaits for channel capacity. Once capacity to send <code>n</code> …\nWaits for channel capacity, moving the <code>Sender</code> and …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if senders belong to the same channel.\nSends a value, waiting until there is capacity.\nSends a value using the reserved capacity.\nSends a value using the reserved capacity.\nAttempts to send a message on this <code>UnboundedSender</code> without …\nSends a value, waiting until there is capacity, but only …\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nTries to receive the next value for this receiver.\nTries to receive the next value for this receiver.\nTries to acquire a slot in the channel without waiting for …\nTries to acquire <code>n</code> slots in the channel without waiting …\nTries to acquire a slot in the channel without waiting for …\nAttempts to immediately send a message on this <code>Sender</code>\nCreates an unbounded mpsc channel for communicating …\nTries to convert a <code>WeakSender</code> into a <code>Sender</code>. This will …\nTries to convert a <code>WeakUnboundedSender</code> into an …\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nThe receive half of the channel was explicitly closed or …\nThe receive half of the channel was explicitly closed or …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the channel because the …\nError returned by the <code>Sender</code>.\nError returned by <code>Sender::send_timeout</code>].\nThe data could not be sent on the channel because the …\nError returned by <code>try_recv</code>.\nThis enumeration is the list of the possible error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReceives a value from the associated <code>Sender</code>.\nSends a value to the associated <code>Receiver</code>.\nBlocking receive to call outside of asynchronous contexts.\nCreates a new one-shot channel for sending single values …\nPrevents the associated <code>Sender</code> handle from sending a value.\nWaits for the associated <code>Receiver</code> handle to close.\n<code>Oneshot</code> error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the associated <code>Receiver</code> handle has been …\nChecks whether the <code>oneshot</code> channel has been closed, and if …\nAttempts to send a value on this channel, returning it …\nAttempts to receive a value.\nThe send half of the channel was dropped without sending a …\nThe send half of the channel has not yet sent a value.\nError returned by the <code>Future</code> implementation for <code>Receiver</code>.\nError returned by the <code>try_recv</code> function on <code>Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReceives values from the associated <code>Sender</code>.\nReturns a reference to the inner value.\nSends values to the associated <code>Receiver</code>.\nReturns a reference to the most recently sent value.\nReturns a reference to the most recently sent value\nReturns a reference to the most recently sent value and …\nWaits for a change notification, then marks the newest …\nCreates a new watch channel, returning the “send” and …\nCompletes when all receivers have dropped.\nWatch error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks if this channel contains a message that this …\nIndicates if the borrowed value is considered as <em>changed</em> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nMarks the state as changed.\nMarks the state as unchanged.\nCreates the sending-half of the <code>watch</code> channel.\nReturns the number of receivers that currently exist.\nReturns <code>true</code> if receivers belong to the same channel.\nReturns <code>true</code> if senders belong to the same channel.\nSends a new value via the channel, notifying all receivers.\nModifies the watched value <strong>conditionally</strong> in-place, …\nModifies the watched value <strong>unconditionally</strong> in-place, …\nSends a new value via the channel, notifying all receivers …\nCreates a new <code>Receiver</code> connected to this <code>Sender</code>.\nWaits for a value that satisfies the provided condition.\nError produced when receiving a change notification.\nError produced when sending a value fails.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn owned permission to abort a spawned task, without …\nTask failed to execute to completion.\nAn owned permission to join on a task (await its …\nA collection of tasks spawned on a Tokio runtime.\nContext guard for <code>LocalSet</code>\nA key for task-local data.\nA set of tasks which are executed on the same thread.\nFuture for the <code>unconstrained</code> method.\nAbort the task associated with the handle.\nAbort the task associated with the handle.\nAborts all tasks on this <code>JoinSet</code>.\nReturns a new <code>AbortHandle</code> that can be used to remotely …\nRuns the provided blocking function on the current thread …\nRuns a future to completion on the provided runtime, …\nReturns a cloned <code>AbortHandle</code> that can be used to remotely …\nConsumes a unit of budget and returns the execution back …\nRemoves all tasks from this <code>JoinSet</code> without aborting them.\nEnters the context of this <code>LocalSet</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTask-related futures.\nReturns a copy of the task-local value if the task-local …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the join error, returning the object with which …\nReturns true if the error was caused by the task being …\nReturns whether the <code>JoinSet</code> is empty.\nChecks if the task associated with this <code>AbortHandle</code> has …\nChecks if the task associated with this <code>JoinHandle</code> has …\nReturns true if the error was caused by the task panicking.\nWaits until one of the tasks in the set completes and …\nReturns the number of tasks currently in the <code>JoinSet</code>.\nCreate a new <code>JoinSet</code>.\nReturns a new local task set.\nPolls for one of the tasks in the set to complete.\nRuns a future to completion on the local set, returning …\nSets a value <code>T</code> as the task-local value for the future <code>F</code>.\nAborts all tasks and waits for them to finish shutting …\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nSpawn the provided task on the <code>JoinSet</code>, returning an …\nRuns the provided closure on a thread where blocking is …\nSpawn the blocking code on the blocking threadpool and …\nSpawn the blocking code on the blocking threadpool of the …\nSpawns a <code>!Send</code> future on the current <code>LocalSet</code>.\nSpawn the provided task on the current <code>LocalSet</code> and store …\nSpawns a <code>!Send</code> task onto the local task set.\nSpawn the provided task on the provided <code>LocalSet</code> and store …\nSpawn the provided task on the provided runtime and store …\nSets a value <code>T</code> as the task-local value for the closure <code>F</code>.\nConsumes the join error, returning the object with which …\nTries to join one of the tasks in the set that has …\nAccesses the current task-local and runs the provided …\nTurn off cooperative scheduling for a future. The future …\nAccesses the current task-local and runs the provided …\nYields execution back to the Tokio runtime.\nA future that sets a value <code>T</code> of a task local for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the value stored in the task local by this …\nTicks as fast as possible until caught up.\nTick at multiples of <code>period</code> from when <code>tick</code> was called, …\nA <code>Duration</code> type to represent a span of time, typically …\nA measurement of a monotonically nondecreasing clock. …\nInterval returned by <code>interval</code> and <code>interval_at</code>.\nDefines the behavior of an <code>Interval</code> when it misses a tick.\nSkips missed ticks and tick on the next multiple of <code>period</code> …\nFuture returned by <code>sleep</code> and <code>sleep_until</code>.\nFuture returned by <code>timeout</code> and <code>timeout_at</code>.\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns the amount of time elapsed from another instant to …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns the instant at which the future will complete.\nReturns <code>MissedTickBehavior::Burst</code>.\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed since this instant was …\nTime error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.\nGets a mutable reference to the underlying value in this …\nGets a reference to the underlying value in this timeout.\nCreates new <code>Interval</code> that yields with interval of <code>period</code>. …\nCreates new <code>Interval</code> that yields with interval of <code>period</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this timeout, returning the underlying value.\nConvert the value into a <code>std::time::Instant</code>.\nReturns <code>true</code> if <code>Sleep</code> has elapsed.\nReturns the <code>MissedTickBehavior</code> strategy currently being …\nReturns an instant corresponding to “now”.\nReturns the period of the interval.\nPolls for the next instant in the interval to be reached.\nResets the interval to complete one period after the …\nResets the <code>Sleep</code> instance to a new deadline.\nResets the interval after the specified <code>std::time::Duration</code>…\nResets the interval to a <code>crate::time::Instant</code> deadline.\nResets the interval immediately.\nReturns the amount of time elapsed from another instant to …\nSets the <code>MissedTickBehavior</code> strategy that should be used.\nWaits until <code>duration</code> has elapsed.\nWaits until <code>deadline</code> is reached.\nCompletes when the next instant in the interval has been …\nRequires a <code>Future</code> to complete before the specified …\nRequires a <code>Future</code> to complete before the specified instant …\nErrors returned by <code>Timeout</code>.\nErrors encountered by the timer implementation.\nCreates an error representing a timer at capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an error representing a misconfigured timer.\nReturns <code>true</code> if the error was caused by the timer being at …\nReturns <code>true</code> if the error was caused by the timer being …\nReturns <code>true</code> if the error was caused by the timer being …\nCreates an error representing a shutdown timer.\nError returned by <code>Timeout</code> and <code>TimeoutRepeating</code>.\nStream for the <code>empty</code> function.\nConvert from a <code>Stream</code>.\nValues yielded by the stream.\nStream for the <code>iter</code> function.\nStream for the <code>once</code> function.\nStream for the <code>pending</code> function.\nA stream of values produced asynchronously.\nAn extension trait for the <code>Stream</code> trait that provides a …\nCombine many streams into one, indexing each source stream …\nA <code>Stream</code> that wraps the values in an <code>Option</code>.\nStream returned by the <code>timeout</code> method.\nTests if every element of the stream matches a predicate.\nTests if any element of the stream matches a predicate.\nReturns the number of streams the map can hold without …\nCombine two streams into one by first returning all values …\nBatches the items in the given stream using a maximum …\nClears the map, removing all key-stream pairs. Keeps the …\nDrain stream pushing all emitted values into a collection.\nReturns <code>true</code> if the map contains a stream for the …\nCreates a stream that yields nothing.\nFilters the values produced by this stream according to …\nFilters the values produced by this stream while …\nA combinator that applies a function to every element in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a stream which ends after the first <code>None</code>.\nInsert a key-stream pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet back the inner <code>Stream</code>.\nReturns <code>true</code> if the map contains no elements.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs mutably in …\nReturns an iterator visiting all keys in arbitrary order.\nReturns the number of streams in the map.\nMaps this stream’s items to a different type, returning …\nMap this stream’s items to a different type for as long …\nCombine two streams into one by interleaving the output of …\nCreates an empty <code>StreamMap</code>.\nCreate a new <code>StreamNotifyClose</code>.\nConsumes and returns the next value in the stream or <code>None</code> …\nCreates a stream that emits an element exactly once.\nTurns the stream into a peekable stream, whose next …\nCreates a stream that is never ready\nAttempt to pull out the next value of this stream, …\nRemoves a key from the map, returning the stream at the …\nReturns the bounds on the remaining length of the stream.\nCreates a new stream that will skip the <code>n</code> first items of …\nSkip elements from the underlying stream while the …\nCreates a new stream of at most <code>n</code> items of the underlying …\nTake elements from this stream while the provided predicate\nMaps this stream’s items asynchronously to a different …\nSlows down a stream by enforcing a delay between items.\nApplies a per-item timeout to the passed stream.\nApplies a per-item timeout to the passed stream.\nConsumes and returns the next item in the stream. If an …\nAn iterator visiting all values in arbitrary order.\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>StreamMap</code> with the specified capacity.\nWrappers for Tokio types that implement <code>Stream</code>.\nA wrapper around <code>tokio::sync::broadcast::Receiver</code> that …\nA wrapper around <code>Interval</code> that implements <code>Stream</code>.\nA wrapper around <code>tokio::io::Lines</code> that implements <code>Stream</code>.\nA wrapper around <code>tokio::sync::mpsc::Receiver</code> that …\nA wrapper around <code>tokio::io::Split</code> that implements <code>Stream</code>.\nA wrapper around <code>TcpListener</code> that implements <code>Stream</code>.\nA wrapper around <code>tokio::sync::mpsc::UnboundedReceiver</code> that …\nA wrapper around <code>UnixListener</code> that implements <code>Stream</code>.\nA wrapper around <code>tokio::sync::watch::Receiver</code> that …\nObtain a pinned reference to the inner <code>Lines&lt;R&gt;</code>.\nObtain a pinned reference to the inner <code>Split&lt;R&gt;</code>.\nCloses the receiving half of a channel without dropping it.\nCloses the receiving half of a channel without dropping it.\nError types for the wrappers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>WatchStream</code> that waits for the value to be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet back the inner <code>Receiver</code>.\nGet back the inner <code>UnboundedReceiver</code>.\nGet back the inner <code>Interval</code>.\nGet back the inner <code>TcpListener</code>.\nGet back the inner <code>UnixListener</code>.\nGet back the inner <code>Lines</code>.\nGet back the inner <code>Split</code>.\nCreate a new <code>ReceiverStream</code>.\nCreate a new <code>UnboundedReceiverStream</code>.\nCreate a new <code>BroadcastStream</code>.\nCreate a new <code>WatchStream</code>.\nCreate a new <code>IntervalStream</code>.\nCreate a new <code>TcpListenerStream</code>.\nCreate a new <code>UnixListenerStream</code>.\nCreate a new <code>LinesStream</code>.\nCreate a new <code>SplitStream</code>.\nAn error returned from the inner stream of a …\nThe receiver lagged too far behind. Attempting to receive …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdaptors from <code>AsyncRead</code>/<code>AsyncWrite</code> to Stream/Sink\nCompatibility between the <code>tokio::io</code> and <code>futures-io</code> …\nModule defining an Either type.\nHelpers for IO related tasks.\nTCP/UDP/Unix helpers for tokio.\nSynchronization primitives\nUDP framing\nA simple <code>Decoder</code> and <code>Encoder</code> implementation that splits up …\nAn error occurred while encoding or decoding a chunk.\nA simple <code>Decoder</code> and <code>Encoder</code> implementation that just …\nDecoding of frames via buffers.\nTrait of helper objects to write out messages as bytes, …\nThe type of unrecoverable frame decoding errors.\nThe type of encoding errors.\nA unified <code>Stream</code> and <code>Sink</code> interface to an underlying I/O …\n<code>FramedParts</code> contains an export of the data of a Framed …\nA <code>Stream</code> of messages decoded from an <code>AsyncRead</code>.\nA <code>Sink</code> of frames encoded to an <code>AsyncWrite</code>.\nAn IO error occurred.\nAn IO error occurred.\nThe type of decoded frames.\nA codec for frames delimited by a frame head specifying …\nAn error when the number of bytes read is more than max …\nA simple <code>Decoder</code> and <code>Encoder</code> implementation that splits up …\nAn error occurred while encoding or decoding a line.\nThe maximum chunk length was exceeded.\nThe maximum line length was exceeded.\nReturns backpressure boundary\nReturns backpressure boundary\nCreates a new length delimited codec builder with default …\nReturns a reference to the underlying codec wrapped by …\nThe codec\nReturns a mutable reference to the underlying codec …\nReturns a mutable reference to the underlying codec …\nAttempts to decode a frame from the provided buffer of …\nA default method available to be called when there are no …\nReturns a reference to the underlying decoder.\nReturns a mutable reference to the underlying decoder.\nReturns a mutable reference to the underlying decoder.\nEncodes a frame into the buffer provided.\nReturns a reference to the underlying encoder.\nReturns a mutable reference to the underlying encoder.\nReturns a mutable reference to the underlying encoder.\nProvides a <code>Stream</code> and <code>Sink</code> interface for reading and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProvides a <code>Stream</code> and <code>Sink</code> interface for reading and …\nReturns a mutable reference to the underlying I/O stream …\nReturns a mutable reference to the underlying I/O stream …\nReturns a mutable reference to the underlying I/O stream …\nReturns a pinned mutable reference to the underlying I/O …\nReturns a pinned mutable reference to the underlying I/O …\nReturns a pinned mutable reference to the underlying I/O …\nReturns a reference to the underlying I/O stream wrapped by\nReturns a reference to the underlying I/O stream wrapped by\nReturns a reference to the underlying I/O stream wrapped by\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>FramedWrite</code>, returning its underlying I/O …\nConsumes the <code>FramedRead</code>, returning its underlying I/O …\nConsumes the <code>Framed</code>, returning its underlying I/O stream.\nConsumes the <code>Framed</code>, returning its underlying I/O stream, …\nThe inner transport used to read bytes to and write bytes …\nFrame a stream of bytes based on a length prefix\nMaps the codec <code>U</code> to <code>C</code>, preserving the read and write …\nMaps the decoder <code>D</code> to <code>C</code>, preserving the read buffer …\nMaps the encoder <code>E</code> to <code>C</code>, preserving the write buffer …\nReturns the current max frame setting\nReturns the maximum line length when decoding.\nReturns the maximum chunk length when decoding.\nCreates a new <code>BytesCodec</code> for shipping around raw bytes.\nCreate a new, default, <code>FramedParts</code>\nCreates a new <code>LengthDelimitedCodec</code> with the default …\nReturns a <code>LinesCodec</code> for splitting up data into lines.\nReturns a <code>AnyDelimiterCodec</code> for splitting up data into …\nCreates a new <code>FramedWrite</code> with the given <code>encoder</code>.\nCreates a new <code>FramedRead</code> with the given <code>decoder</code>.\nProvides a <code>Stream</code> and <code>Sink</code> interface for reading and …\nReturns a <code>LinesCodec</code> with a maximum line length limit.\nReturns a <code>AnyDelimiterCodec</code> with a maximum chunk length …\nThe buffer with read but unprocessed data.\nReturns a reference to the read buffer.\nReturns a reference to the read buffer.\nReturns a mutable reference to the read buffer.\nReturns a mutable reference to the read buffer.\nUpdates backpressure boundary\nUpdates backpressure boundary\nUpdates the max frame setting.\nCreates a new <code>FramedRead</code> with the given <code>decoder</code> and a …\nProvides a <code>Stream</code> and <code>Sink</code> interface for reading and …\nA buffer with unprocessed data which are not written yet.\nReturns a reference to the write buffer.\nReturns a reference to the write buffer.\nReturns a mutable reference to the write buffer.\nReturns a mutable reference to the write buffer.\nConfigure length delimited <code>LengthDelimitedCodec</code>s.\nA codec for frames delimited by a frame head specifying …\nAn error when the number of bytes read is more than max …\nRead the length field as a big endian integer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDelta between the payload length specified in the header …\nSets the number of bytes used to represent the length field\nSets the number of bytes in the header before the length …\nSets the unsigned integer type used to represent the …\nRead the length field as a little endian integer\nSets the max frame length in bytes\nRead the length field as a native endian integer\nCreates a new length delimited codec builder with default …\nCreate a configured length delimited <code>LengthDelimitedCodec</code>\nCreate a configured length delimited <code>Framed</code>\nCreate a configured length delimited <code>FramedRead</code>\nCreate a configured length delimited <code>FramedWrite</code>\nSets the number of bytes to skip before reading the payload\nA compatibility layer that allows conversion between the …\nExtension trait that allows converting a type implementing …\nExtension trait that allows converting a type implementing …\nExtension trait that allows converting a type implementing …\nExtension trait that allows converting a type implementing …\nWraps <code>self</code> with a compatibility layer that implements …\nWraps <code>self</code> with a compatibility layer that implements …\nWraps <code>self</code> with a compatibility layer that implements …\nWraps <code>self</code> with a compatibility layer that implements …\nReturns the argument unchanged.\nGet a mutable reference to the <code>Future</code>, <code>Stream</code>, <code>AsyncRead</code>, …\nGet a reference to the <code>Future</code>, <code>Stream</code>, <code>AsyncRead</code>, or …\nCalls <code>U::from(self)</code>.\nReturns the wrapped item.\nCombines two different futures, streams, or sinks having …\nAccepts a new incoming connection from this listener.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the local address that this listener is bound to.\nA helper that wraps a <code>Sink</code><code>&lt;</code><code>Bytes</code><code>&gt;</code> and converts it into a …\nAn adapter that lets you inspect the data that’s being …\nAn adapter that lets you inspect the data that’s being …\nConvert an <code>AsyncRead</code> into a <code>Stream</code> of byte chunks.\nConvert a <code>Sink</code> of byte chunks into an <code>AsyncWrite</code>.\nConvert a <code>Stream</code> of byte chunks into an <code>AsyncRead</code>.\nUse a <code>tokio::io::AsyncRead</code> synchronously as a <code>std::io::Read</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the underlying stream.\nGets a mutable reference to the underlying sink.\nGets a mutable reference to the underlying sink.\nGets a pinned mutable reference to the underlying stream.\nGets a reference to the underlying stream.\nGets a reference to the underlying sink.\nGets a reference to the underlying sink.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this <code>BufWriter</code>, returning the underlying stream.\nConsume this bridge, returning the underlying stream.\nConsumes this <code>SinkWriter</code>, returning the underlying sink.\nConsumes the <code>InspectWriter</code>, returning the wrapped writer\nConsumes the <code>InspectReader</code>, returning the wrapped reader\nConsumes this <code>CopyToBytes</code>, returning the underlying sink.\nConsumes this <code>StreamReader</code>, returning a Tuple consisting …\nDetermines if the underlying <code>tokio::io::AsyncWrite</code> target …\nConvert a stream of byte chunks into an <code>AsyncRead</code>.\nUse a <code>tokio::io::AsyncRead</code> synchronously as a <code>std::io::Read</code>…\nCreates a new <code>SinkWriter</code>.\nConvert an <code>AsyncRead</code> into a <code>Stream</code> with item type …\nCreate a new <code>InspectWriter</code>, wrapping <code>write</code> and calling <code>f</code> …\nCreate a new <code>InspectReader</code>, wrapping <code>reader</code> and calling <code>f</code> …\nCreates a new <code>CopyToBytes</code>.\nUse a <code>tokio::io::AsyncRead</code> synchronously as a <code>std::io::Read</code>…\nTry to read data from an <code>AsyncRead</code> into an implementer of …\nTry to write data from an implementer of the <code>Buf</code> trait to …\nRead data from an <code>AsyncRead</code> into an implementer of the …\nShutdown this writer. This method provides a way to call …\nConvert an <code>AsyncRead</code> into a <code>Stream</code> with item type …\nThe socket address type of this listener.\nThe stream’s type of this listener.\nA trait for a listener: <code>TcpListener</code> and <code>UnixListener</code>.\nFuture for accepting a new connection from a listener.\nAccepts a new incoming connection from this listener.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the local address that this listener is bound to.\nPolls to accept a new incoming connection to this listener.\nUnix domain socket helpers.\nA token which can be used to signal a cancellation request …\nA wrapper for cancellation token which automatically …\nA wrapper around <code>Semaphore</code> that provides a <code>poll_acquire</code> …\nError returned by the <code>PollSender</code> when the channel is …\nA wrapper around <code>mpsc::Sender</code> that can be polled.\nA reusable <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + Send + &#39;a&gt;&gt;</code>.\nA Future that is resolved once the corresponding …\nA Future that is resolved once the corresponding …\nAborts the current in-progress send, if any.\nAdds <code>n</code> new permits to the semaphore.\nReturns the current number of available permits.\nCancel the <code>CancellationToken</code> and all child tokens which …\nReturns a <code>Future</code> that gets fulfilled when cancellation is …\nReturns a <code>Future</code> that gets fulfilled when cancellation is …\nCreates a <code>CancellationToken</code> which will get cancelled …\nCreates a clone of the <code>CancellationToken</code> which will get …\nClones this <code>PollSender</code>.\nObtain a clone of the inner semaphore.\nCloses the semaphore.\nCloses this sender.\nReturns stored cancellation token and removes this drop …\nCreates a <code>DropGuard</code> for this token.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a pinned reference to the underlying future.\nGets a reference to the <code>Sender</code> of the underlying channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet back the inner semaphore.\nConsumes the stored value, if any.\nReturns <code>true</code> if the <code>CancellationToken</code> is cancelled.\nChecks whether this sender is been closed.\nCreates a new <code>CancellationToken</code> in the non-cancelled state.\nCreate a new <code>PollSemaphore</code>.\nCreate a new <code>ReusableBoxFuture&lt;T&gt;</code> containing the provided …\nCreates a new <code>PollSender</code>.\nPoll the future stored inside this box.\nPoll the future stored inside this box.\nPoll to acquire a permit from the semaphore.\nPoll to acquire many permits from the semaphore.\nAttempts to prepare the sender to receive a value.\nSends an item to the channel.\nReplace the future currently stored in this box.\nReplace the future currently stored in this box.\nA unified <code>Stream</code> and <code>Sink</code> interface to an underlying …\nReturns a reference to the underlying codec wrapped by …\nReturns a mutable reference to the underlying codec …\nReturns the argument unchanged.\nReturns a mutable reference to the underlying I/O stream …\nReturns a reference to the underlying I/O stream wrapped …\nCalls <code>U::from(self)</code>.\nConsumes the <code>Framed</code>, returning its underlying I/O stream.\nCreate a new <code>UdpFramed</code> backed by the given socket and …\nReturns a reference to the read buffer.\nReturns a mutable reference to the read buffer.\nTrait implemented by callsites.\nThe “debug” level.\n<code>Dispatch</code> trace data to a <code>Subscriber</code>.\nThe “error” level.\n<code>Event</code>s represent single points in time where something …\nThe “info” level.\nIdentifies a span within the context of a subscriber.\nAttaches spans to a <code>std::future::Future</code>.\nDescribes the level of verbosity of a span or event.\nMetadata describing a span or event.\nA handle representing a span, with the capability to enter …\nTrait representing the functions required to collect trace …\nThe “trace” level.\nA field value of an erased type.\nThe “warn” level.\nReturns the string representation of the <code>Level</code>.\nCallsites represent the source locations from which spans …\nReturns an opaque <code>Identifier</code> that uniquely identifies the …\nConstructs a new <code>Span</code> as child of the given parent span, …\nNotifies the subscriber that a span ID has been cloned.\nNotifies the subscriber that a span ID has been cloned.\nReturns a handle to the span considered by the <code>Subscriber</code> …\nReturns a type representing this subscriber’s view of …\nReturns a type representing this subscriber’s view of …\nConstructs an event at the debug level.\nConstructs a span at the debug level.\nReturns the current default dispatcher\nDispatches trace events to <code>Subscriber</code>s.\nIf <code>self</code> is the same type as the provided <code>TypeId</code>, returns …\nReturns some reference to this <code>[</code>Subscriber…\nReturns some reference to this <code>Subscriber</code> value if it is …\nReturns some reference to this <code>Subscriber</code> value if it is …\nReturns some reference to this <code>Subscriber</code> value if it is …\nReturns some reference to the <code>Subscriber</code> this <code>Dispatch</code> …\nCreates a <code>WeakDispatch</code> from this <code>Dispatch</code>.\n<strong>This method is deprecated.</strong>\nNotifies the subscriber that a span ID has been dropped.\nReturns true if a span or event with the specified metadata…\nReturns true if a span with the specified metadata would be\nChecks whether a span or event is enabled based on the …\nRecords that a span has been entered.\nEnters this span, returning a guard that will exit the …\nRecords that a span has been can_enter.\nEnters this span, consuming it and returning a guard that …\nConstructs an event at the error level.\nConstructs a span at the error level.\nEvents represent single points in time during the …\nRecords that an <code>Event</code> has occurred.\nRecords that an <code>Event</code> has occurred.\nConstructs a new <code>Event</code>.\nDetermine if an <code>Event</code> should be recorded.\nTests whether an event with the specified level and target …\nRecords that a span has been exited.\nRecords that a span has been exited.\n<code>Span</code> and <code>Event</code> key-value data.\nReturns a <code>Field</code> for the field with the given <code>name</code>, if one …\nReturns the names of the fields on the described span or …\nReturns the name of the source code file where the span …\nIndicates that the span with the given ID has an indirect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new span ID from the given <code>NonZeroU64</code>.\nConstructs a new span ID from the given <code>u64</code>.\nReturns true if this <code>Span</code> has a field for the given <code>Field</code> …\nReturns this span’s <code>Id</code>, if it is enabled.\nInstruments this type with the current <code>Span</code>, returning an …\nExecutes the given function in the context of this span.\nConstructs an event at the info level.\nConstructs a span at the info level.\nAttach a span to a <code>std::future::Future</code>.\nInstruments this type with the provided <code>Span</code>, returning an …\nInstruments a function to create and enter a <code>tracing</code> span …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the span’s ID as a <code>NonZeroU64</code>.\nReturns the span’s ID as a <code>u64</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Subscriber</code> is the same type as <code>T</code>.\nReturns <code>true</code> if this <code>Dispatch</code> forwards to a <code>Subscriber</code> of …\nReturns <code>true</code> if this span was disabled by the subscriber …\nReturns true if the callsite kind is <code>Event</code>.\nReturns <code>true</code> if this span was constructed by <code>Span::none</code> …\nReturn true if the callsite kind is <code>Span</code>.\nReturns the level of verbosity of the described span or …\nTrace verbosity level filtering.\nReturns the line number in the source code file where the …\nReturns the highest verbosity level that this <code>Subscriber</code> …\nMetadata describing trace data.\nReturns the metadata associated with the callsite.\nReturns this span’s <code>Metadata</code>, if it is enabled.\nStatically constructs new span metadata.\nReturns the path to the Rust module where the span …\nReturns the name of the span.\nConstructs a new <code>Span</code> with the given metadata and set of …\nConstruct new metadata for a span or event, with a name, …\nReturns a <code>Dispatch</code> that forwards to the given <code>Subscriber</code>.\nConstructs a new disabled span with the given <code>Metadata</code>.\nConstructs a new <code>Span</code> as the root of its own trace tree, …\nVisit the construction of a new span, returning a new span …\nRecord the construction of a new span, returning a new ID …\nConstructs a new span that is <em>completely disabled</em>.\nReturns a new <code>Dispatch</code> that discards events and spans.\nInvoked when this subscriber becomes a <code>Dispatch</code>.\nReturns this span, if it was enabled by the current …\nVisits this value with the given <code>Visitor</code>.\nRecord a set of values on a span.\nRecords that the field described by <code>field</code> has the value …\nRecord a set of values on a span.\nRecords all the fields in the provided <code>ValueSet</code>.\nAdds an indication that <code>span</code> follows from the span with …\nAdds an indication that <code>span</code> follows from the span with …\nRegisters a new callsite with this subscriber, returning …\nRegisters a new callsite with this subscriber, returning …\nSets the <code>Interest</code> for this callsite.\nSpans represent periods of time in which a program was …\nConstructs a new span.\nTests whether a span with the specified level and target …\nCollects and records trace data.\nReturns a string describing the part of the system where …\nConstructs an event at the trace level.\nConstructs a span at the trace level.\nNotifies the subscriber that a span ID has been dropped, …\nNotifies the subscriber that a span ID has been dropped, …\nConstructs an event at the warn level.\nConstructs a span at the warn level.\nInvokes a function with a reference to this span’s ID …\nTrait implemented by callsites.\nA default <code>Callsite</code> implementation.\nUniquely identifies a <code>Callsite</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the callsite’s cached <code>Interest</code>, or registers it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the metadata associated with the callsite.\nReturns a new <code>DefaultCallsite</code> with the specified <code>Metadata</code>.\nClear and reregister interest on every <code>Callsite</code>\nRegister a new <code>Callsite</code> with the global registry.\nRegisters this callsite with the global callsite registry.\nSets the <code>Interest</code> for this callsite.\nA guard that resets the current default dispatcher to the …\n<code>Dispatch</code> trace data to a <code>Subscriber</code>.\nReturned if setting the global dispatcher fails.\n<code>WeakDispatch</code> is a version of <code>Dispatch</code> that holds a …\nReturns the argument unchanged.\nExecutes a closure with a reference to this thread’s …\nCalls <code>U::from(self)</code>.\nSets the dispatch as the default dispatch for the duration …\nSets this dispatch as the global default for the duration …\nAttempts to upgrade this <code>WeakDispatch</code> to a <code>Dispatch</code>.\nSets this dispatch as the default for the duration of a …\n<code>Event</code>s represent single points in time where something …\nConstructs a new <code>Event</code> with the specified metadata and set …\nConstructs a new <code>Event</code> with the specified metadata and set …\nReturns an iterator over the set of values on this <code>Event</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the new event’s parent should be …\nReturns true if the new event should be a root.\nReturns metadata describing this <code>Event</code>.\nReturns a new <code>Event</code> in the current span, with the …\nReturns a new <code>Event</code> as a child of the specified span, with …\nReturns the new event’s explicitly-specified parent, if …\nVisits all the fields on this <code>Event</code> with the specified …\nTrait implemented to allow a type to be used as a field …\nA <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.\nA <code>Value</code> which serializes using <code>fmt::Display</code>.\nAn empty field.\nAn opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…\nDescribes the fields present on a span.\nAn iterator over a set of fields.\nA field value of an erased type.\nA set of fields and values for a span.\nVisits typed values.\nAttempts to convert <code>&amp;self</code> into a <code>Field</code> with the specified …\nReturns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>\nReturns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>\nReturns <code>true</code> if <code>self</code> contains the given <code>field</code>.\nWraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can be\nWraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that can …\nReturns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not this <code>FieldSet</code> has fields.\nReturns true if this <code>ValueSet</code> contains <em>no</em> values.\nReturns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.\nReturns the number of fields in this <code>FieldSet</code>.\nReturns the number of fields in this <code>ValueSet</code> that would …\nReturns a string representing the name of the field.\nConstructs a new <code>FieldSet</code> with the given array of field …\nVisits this value with the given <code>Visitor</code>.\nVisits all the fields in this <code>ValueSet</code> with the provided …\nVisit a boolean value.\nVisit a value implementing <code>fmt::Debug</code>.\nRecords a type implementing <code>Error</code>.\nVisit a double-precision floating point value.\nVisit a signed 128-bit integer value.\nVisit a signed 64-bit integer value.\nVisit a string value.\nVisit an unsigned 128-bit integer value.\nVisit an unsigned 64-bit integer value.\nAttaches spans to a <code>std::future::Future</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> <code>Span</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> …\nExtension trait allowing futures to be instrumented with a …\nBorrows the <code>Dispatch</code> that is entered when this type is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruments this type with the current <code>Span</code>, returning an …\nBorrows the wrapped type.\nBorrows the wrapped type.\nMutably borrows the wrapped type.\nMutably borrows the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nInstruments this type with the provided <code>Span</code>, returning an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nBorrows the <code>Span</code> that this type is instrumented by.\nMutably borrows the <code>Span</code> that this type is instrumented by.\nAttaches the current default <code>Subscriber</code> to this type, …\nAttaches the provided <code>Subscriber</code> to this type, returning a …\nA filter comparable to a verbosity <code>Level</code>.\nIndicates that a string could not be parsed to a valid …\nThe statically configured maximum trace level.\nThe “debug” level.\nThe “error” level.\n<code>Event</code> callsite\n<code>enabled!</code> callsite. <code>Subscriber</code>s can assume this <code>Kind</code> means …\nThe “info” level.\nIndicates whether the callsite is a span or event.\nDescribes the level of verbosity of a span or event.\nA filter comparable to a verbosity <code>Level</code>.\nMetadata describing a span or event.\nThe “off” level.\nReturned if parsing a <code>Level</code> fails.\nIndicates that a string could not be parsed to a valid …\n<code>Span</code> callsite\nThe “trace” level.\nThe “warn” level.\nReturns a <code>LevelFilter</code> that matches the most verbose <code>Level</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>LevelFilter</code> that enables spans and events with …\nSets that this <code>Kind</code> is a hint.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the most verbose <code>Level</code> that this filter accepts, …\nReturn true if the callsite kind is <code>Event</code>\nReturn true if the callsite kind is <code>Hint</code>\nReturn true if the callsite kind is <code>Span</code>\nTrait implemented by types which have a span <code>Id</code>.\nAttributes provided to a <code>Subscriber</code> describing a new span …\nA guard representing a span which has been entered and is …\nAn owned version of <code>Entered</code>, a guard representing a span …\nIdentifies a span within the context of a subscriber.\nA set of fields recorded by a span.\nA handle representing a span, with the capability to enter …\nReturns the <code>Id</code> of the span that <code>self</code> corresponds to, or …\nReturns <code>Attributes</code> describing a new child span of the …\nReturns <code>true</code> if this set of <code>Attributes</code> contains a value …\nReturns <code>true</code> if this <code>Record</code> contains a value for the given …\nExits this span, returning the underlying <code>Span</code>.\nReturns the set of all fields defined by this span’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns this span’s <code>Id</code>, if it is enabled.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the new span’s parent should be …\nReturns true if this set of <code>Attributes</code> contains <em>no</em> values.\nReturns true if this <code>Record</code> contains <em>no</em> values.\nReturns true if the new span should be a root.\nReturns the number of fields that would be visited from …\nReturns a reference to the new span’s metadata.\nReturns <code>Attributes</code> describing a new child span of the …\nConstructs a new <code>Record</code> from a <code>ValueSet</code>.\nReturns <code>Attributes</code> describing a new span at the root of …\nReturns the new span’s explicitly-specified parent, if …\nRecords all the fields in this set of <code>Attributes</code> with the …\nRecords all the fields in this <code>Record</code> with the provided …\nReturns a reference to a <code>ValueSet</code> containing any values …\nA guard that resets the current default dispatcher to the …\nIndicates a <code>Subscriber</code>’s interest in a particular …\nA no-op <code>Subscriber</code>.\nReturned if setting the global dispatcher fails.\nTrait representing the functions required to collect trace …\nReturns an <code>Interest</code> indicating the subscriber is always …\nNotifies the subscriber that a span ID has been cloned.\nReturns a type representing this subscriber’s view of …\nIf <code>self</code> is the same type as the provided <code>TypeId</code>, returns …\n<strong>This method is deprecated.</strong>\nReturns true if a span or event with the specified metadata…\nRecords that a span has been entered.\nRecords that an <code>Event</code> has occurred.\nDetermine if an <code>Event</code> should be recorded.\nRecords that a span has been exited.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the subscriber is always interested in …\nReturns <code>true</code> if the subscriber is never interested in …\nReturns <code>true</code> if the subscriber is sometimes interested in …\nReturns the highest verbosity level that this <code>Subscriber</code> …\nReturns an <code>Interest</code> indicating that the subscriber is …\nReturns a new <code>NoSubscriber</code>.\nVisit the construction of a new span, returning a new span …\nInvoked when this subscriber becomes a <code>Dispatch</code>.\nRecord a set of values on a span.\nAdds an indication that <code>span</code> follows from the span with …\nRegisters a new callsite with this subscriber, returning …\nSets the <code>Subscriber</code> as the default for the current thread …\nSets this subscriber as the global default for the …\nReturns an <code>Interest</code> indicating the subscriber is sometimes …\nNotifies the subscriber that a span ID has been dropped, …\nSets this <code>Subscriber</code> as the default for the current thread …\nDelete all values that exactly match\nDelete all tuples that have the key K\nTerminates the inner <code>Child</code> process when dropped.\nA wrapper christening a closure as a monotonic function\nA wrapper christening a closure as a lattice morphism\nPersist T values\nPersist key-value pairs\nPersit or delete tuples\nPersit or delete key-value pairs\nA framed TCP <code>Sink</code> (sending).\nA framed TCP <code>Stream</code> (receiving).\nA UDP undelimited bytes <code>Sink</code> (sending).\nA UDP undelimited bytes <code>Stream</code> (receiving).\nA framed UDP <code>Sink</code> (sending).\nA framed UDP <code>Stream</code> (receiving).\nA UDP newline-delimited <code>String</code> <code>Sink</code> (sending).\nA UDP newline-delimited <code>String</code> <code>Stream</code> (receivng).\nA UDP length-delimited frame <code>Sink</code> (sending).\nA UDP length-delimited frame <code>Stream</code> (receiving).\nCreate a listening tcp socket, and then as new connections …\nReturns a newline-delimited bytes <code>Sender</code>, <code>Receiver</code>, and …\nThis is the same thing as <code>bind_tcp_bytes</code> except instead of …\nReturns a length-delimited bytes <code>Sink</code>, <code>Stream</code>, and …\nReturns a newline-delimited bytes <code>Sink</code>, <code>Stream</code>, and …\nModule for the <code>Clear</code> trait.\nCollects the immediately available items from the <code>Stream</code> …\nCollects the immediately available items from the <code>Stream</code> …\nThe inverse of <code>bind_tcp</code>.\nThe inverse of <code>bind_tcp_bytes</code>.\nThis is the same thing as <code>connect_tcp_bytes</code> except instead …\nTrait for the <code>demux_enum</code> derive and operator.\nSerialize a message from bytes using bincode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolve the <code>ipv4</code> <code>SocketAddr</code> from an IP or hostname string.\nConverts an iterator into a stream that emits <code>n</code> items at a …\nModule for <code>MonotonicMap</code>.\nA multiset backed by a HashMap\nReturns an <code>Iterator</code> of any immediately available items …\nRun a rust example as a test.\nSerialize a message to bytes using bincode.\nHydroflow Deterministic Simulation Testing Framework\nSort a slice using a key fn which returns references.\nA vector that supports efficient deletion without …\nHelper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …\nHelper creates a TCP <code>Stream</code> and <code>Sink</code> for undelimited …\nHelper creates a TCP <code>Stream</code> and <code>Sink</code> from the given …\nHelper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>str</code>ings delimited …\nHelper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …\nHelper creates a UDP <code>Stream</code> and <code>Sink</code> for undelimited …\nReturns a UDP <code>Stream</code>, <code>Sink</code>, and address for the given …\nHelper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>String</code>s delimited …\nReturns a channel as a (1) unbounded sender and (2) …\nHelper creates a Unix <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …\nHelper creates a Unix <code>Stream</code> and <code>Sink</code> for undelimited …\nHelper creates a Unix <code>Stream</code> and <code>Sink</code> from the given …\nHelper creates a Unix <code>Stream</code> and <code>Sink</code> for <code>str</code>ings …\nUnsync (i.e. single-threaded) synchronization primitives.\nReturns an unsync channel as a (1) sender and (2) receiver …\nWaits for a specific process output before returning.\nA trait for abstracting over the <code>.clear()</code> method available …\nA wrapper struct which implements <code>Clear</code> by setting self to …\nClears the collection without neccesarily freeing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait for use with the <code>demux_enum</code> operator.\nBase implementation to constrain that <code>DemuxEnum&lt;SOMETHING&gt;</code> …\nOutput tuple type.\nSpecial case of <code>DemuxEnum</code> for when there is only one …\nPushes self into the corresponding output pusherator in …\nConvert self into it’s single variant tuple Output.\nContains runtime information passed by Hydro Deploy to a …\nDescribes how to connect to a service which is listening …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA map-like interface which in reality only stores one …\nReturns the argument unchanged.\nGets a mutable reference to the inner value. If <code>key</code> is …\nGets a mutable reference to the inner value. If <code>key</code> is …\nInserts the value using the function if new <code>key</code> is …\nCalls <code>U::from(self)</code>.\nCreates a new <code>MonotonicMap</code> initialized with the given …\nA multiset backed by a HashMap\nReturns the argument unchanged.\nInsert item into the multiset. see …\nCalls <code>U::from(self)</code>.\nAn address is a combination of a hostname and an interface …\nA fleet is a collection of hosts in the simulation. It is …\nA host is a single Hydroflow transducer running in the …\nA builder for constructing a host in the simulation.\nA hostname is a unique identifier for a host in the …\nAn inbox is used by a host to receive messages for the …\nA message sender is used to send messages to an inbox on a …\nA message with an delivery address.\nTransducers can send messages to other transducers by …\nUsed in conjunction with the <code>HostBuilder</code> to construct a …\nAdds a new host to the fleet with the given name and …\nBuilds the host with the supplied configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a host by name.\nGet a host by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of HostBuilder for a given hostname,\nCreates a new instance of Fleet.\nCreate a new address with the given hostname and interface …\nCreate a new inbox on the host with the given interface …\nCreates a new outbox on the host with the given interface …\nProcess all network messages in the simulation. This …\nAdvance time on all hosts by a single tick. Returns true …\nRun a single tick on the host’s transducer. Returns true …\nTick all hosts until all hosts are quiescent (i.e. no new …\nSend a message to the inbox on the host.\nSupplies the (mandatory) transducer that runs on this host.\nA vector that supports efficient deletion without …\nDelete all items of a specific value from this vector. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterate through all items in the vector in order. Deleted …\nInsert item into the vector, see …\nUnsync single-producer single-consumer channel (i.e. a …\nThe receive half of the channel was explicitly closed or …\nThe data could not be sent on the channel because the …\nReceiving half of an unsync MPSC.\nError returned by the <code>Sender</code>.\nSend half of am unsync MPSC.\nThis enumeration is the list of the possible error …\nCreate a bounded unsync MPSC channel. Panics if capacity …\nCreate an unsync MPSC channel, either bounded (if <code>capacity</code> …\nCloses this receiving end, not allowing more values to be …\nClose this sender. No more messages can be sent from this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this sender or the corresponding <code>Receiver</code> is closed.\nPoll for a value. NOTE: takes <code>&amp;mut self</code> to prevent …\nReceive a value asynchronously.\nAsynchronously sends value to the receiver.\nTries to send the value to the receiver without blocking.\nCreate an unbounded unsync MPSC channel.\nThis as a variadic of exclusive (<code>mut</code>) references.\nThis as a variadic of references.\nClone a variadic of references <code>EitherRefVariadic</code> into a …\nCopy a variadic of references <code>EitherRefVariadic</code> into a …\nA variadic of either shared references, exclusive …\nCreates a new (longer) variadic type by appending <code>Suffix</code> …\nA variadic where all elements are the same type, <code>T</code>.\nIterator type returned by <code>into_iter</code>.\nIterator type returned by <code>Self::iter_any_mut</code>.\nIterator type returned by <code>Self::iter_any_ref</code>.\nThe number of items in this variadic (its length).\nThis type with all shared <code>&amp;</code> references replaced with …\nA variadic where each item is an exclusive reference …\nA variadic where all item implement <code>PartialEq</code>.\nThis type with all exclusive <code>&amp;mut</code> references replaced with …\nA variadic where each item is a shared reference <code>&amp;item</code>.\nThe reverse of this variadic type.\nHelper trait for splitting a variadic into two parts. …\nThe second part when splitting this variadic by <code>Prefix</code>.\nThe un-referenced variadic. Each item will have one layer …\nA variadic tuple list.\nExtension methods/types for <code>Variadic</code>s.\nConvert an exclusive (<code>mut</code>) reference to this variadic into …\nConvert a reference to this variadic into a variadic of …\nClone self per-value.\nCopy self per-value.\n<code>PartialEq</code> between a referenced variadic and a variadic of …\n<code>PartialEq</code> for the <code>AsRefVar</code> version op <code>Self</code>.\nExtends this variadic value by appending <code>suffix</code> onto the …\nReturns a reference to an element.\nReturns an exclusive reference to an element.\nTurns this <code>HomogenousVariadic&lt;T&gt;</code> into an iterator of items …\nIterate this variadic as <code>&amp;mut dyn Any</code> exclusive references.\nIterate this variadic as <code>&amp;dyn Any</code> references.\nConvert all exclusive (<code>mut</code>) references into shared …\nReverses this variadic value.\nSplits this variadic into two parts, first the <code>Prefix</code>, and …\nVariadic patterns macro.\nVariadic expressions (values) macro.\nVariadic types macro.\nThis macro generates a basic variadic trait where each …\nA <code>Duration</code> type to represent a span of time, typically …\nA measurement of a monotonically nondecreasing clock. …\nThe maximum duration.\nThe duration of one microsecond.\nThe duration of one millisecond.\nThe duration of one nanosecond.\nThe duration of one second.\nA measurement of the system clock, useful for talking to …\nAn error returned from the <code>duration_since</code> and <code>elapsed</code> …\nAn error which can be returned when converting a …\nAn anchor in time which can be used to create new …\nAn anchor in time which can be used to create new …\nA duration of zero time.\nComputes the absolute difference between <code>self</code> and <code>other</code>.\nPanics\nPanics\nReturns the total number of whole microseconds contained …\nReturns the total number of whole milliseconds contained …\nReturns the number of milliseconds contained by this …\nReturns the number of milliseconds contained by this …\nReturns the total number of nanoseconds contained by this …\nReturns the number of <em>whole</em> seconds contained by this …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns the number of seconds contained by this <code>Duration</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …\nChecked <code>Duration</code> addition. Computes <code>self + other</code>, …\nChecked <code>Duration</code> division. Computes <code>self / other</code>, …\nReturns the amount of time elapsed from another instant to …\nChecked <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nReturns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …\nChecked <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.\nDivide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.\nDivide <code>Duration</code> by <code>f32</code>.\nDivide <code>Duration</code> by <code>f64</code>.\nReturns the positive duration which represents how far …\nReturns the amount of time elapsed from another instant to …\nReturns the amount of time elapsed from an earlier point …\nReturns the amount of time elapsed since this instant.\nReturns the difference from this system time to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Duration</code> from the specified number of days.\nCreates a new <code>Duration</code> from the specified number of hours.\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of whole …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of …\nCreates a new <code>Duration</code> from the specified number of weeks.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this <code>Duration</code> spans no time.\nMultiplies <code>Duration</code> by <code>f32</code>.\nMultiplies <code>Duration</code> by <code>f64</code>.\nCreates a new <code>Duration</code> from the specified number of whole …\nReturns an instant corresponding to “now”.\nReturns the system time corresponding to “now”.\nSaturating <code>Duration</code> addition. Computes <code>self + other</code>, …\nReturns the amount of time elapsed from another instant to …\nSaturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …\nSaturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …\nReturns the amount of time elapsed from another instant to …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in whole …\nReturns the fractional part of this <code>Duration</code>, in …\nThe checked version of <code>from_secs_f32</code>.\nThe checked version of <code>from_secs_f64</code>.")