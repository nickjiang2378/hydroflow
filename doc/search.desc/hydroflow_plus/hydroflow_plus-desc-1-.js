searchState.loadedDescShard("hydroflow_plus", 1, "A value of type <code>R</code>.\nOnly the right value of type <code>B</code> is present.\nThe total number of elements that were in <code>J</code> along with the …\nAn iterator adaptor that steps a number elements in the …\nAn iterator adaptor that borrows from a <code>Clone</code>-able iterator\nOne half of an iterator pair where both return the same …\nAn iterator over a incomplete tuple.\nAn iterator to iterate through all combinations in a <code>Clone</code>…\nAn iterator over all contiguous windows that produces …\nAn iterator that groups the items in tuples of a specific …\nSee <code>unfold</code> for more information.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to apply a mutating function to each …\nAn iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nAn iterator adaptor that wraps each element in an <code>Position</code>.\nSee <code>multizip</code> for more information.\nAn iterator which iterates two other iterators …\nAn iterator which iterates two other iterators …\nComposable external iteration.\nThis is the generic way to perform any operation on a …\nTest whether the predicate holds for all elements in the …\nCheck whether all elements compare equal.\nCheck whether all elements are unique (non equal).\nTest whether the predicate holds for any elements in the …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConverts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\nConverts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.\nAssert that two iterables produce equal sequences, with …\nIf the iterator yields no elements, Ok(None) will be …\nA “meta iterator adaptor”. Its closure receives a …\nIf Both, return <code>Some</code> tuple containing left and right.\nReturn an iterator adaptor that iterates over the …\nTakes two iterables and creates a new iterator over both …\nChain zero or more iterators together into one sequence.\nReturn an <em>iterable</em> that can chunk the iterator.\nReturn an iterator over all windows, wrapping back to the …\nCreate an iterator that clones each element from &amp;T to T\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nReturn an iterator adaptor that uses the passed-in closure …\nGroups elements from the <code>GroupingMap</code> source by key and …\nCollects all items from the iterator into a tuple of a …\n<code>.collect_vec()</code> is simply a type specialization of …\nReturn an iterator adaptor that iterates over the <code>k</code>-length …\nReturn an iterator that iterates over the <code>k</code>-length …\nCombine all an iterator’s elements into one element by …\nCombine all an iterator’s elements into one element by …\nCreate an iterator that maps for example iterators of …\nReturns <code>true</code> if the given item is present in this iterator.\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nCollect the items in this iterator and return a <code>HashMap</code> …\nCollect the items in this iterator and return a <code>HashMap</code> …\nRemove duplicates from sections of consecutive identical …\nRemove duplicates from sections of consecutive identical …\nRemove duplicates from sections of consecutive identical …\nRemove duplicates from sections of consecutive identical …\nCompares every element yielded by both <code>i</code> and <code>j</code> with the …\nConsume the first <code>n</code> elements from the iterator eagerly, …\nConsume the last <code>n</code> elements from the iterator eagerly, and …\nReturn an iterator adaptor that produces elements that …\nReturn an iterator adaptor that produces elements that …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nIterate <code>iterable</code> with a running index.\nReturn <code>true</code> if both iterables produce equal sequences …\nIf the iterator yields exactly one element, that element …\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nReturn an iterator adaptor that filters and transforms …\nReturn an iterator adaptor that filters every <code>Result::Ok</code> …\nFind the value of the first element satisfying a predicate …\nFind the value of the first element satisfying a predicate …\nFind the position and value of the first element …\nReturn an iterator adaptor that flattens every <code>Result::Ok</code> …\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nConvert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.\nPerform a fold operation over the iterable.\nGroups elements from the <code>GroupingMap</code> source by key and …\nAccumulator of the elements in the iterator.\nGroups elements from the <code>GroupingMap</code> source by key and …\nFold <code>Result</code> values from an iterator.\nFold <code>Option</code> values from an iterator.\nSee <code>.fold_ok()</code>.\nAn iterator method that applies a function, producing a …\nRun the closure <code>f</code> eagerly on each element of the iterator.\nFormat all iterator elements, separated by <code>sep</code>.\nFormat all iterator elements, separated by <code>sep</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn an <em>iterable</em> that can group iterator elements. …\nIf <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.\nIf <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.\nCreate an iterator that interleaves elements in <code>i</code> and <code>j</code>.\nAlternate elements from two iterators until both have run …\nAlternate elements from two iterators until at least one …\nIterate <code>iterable</code> with a particular value inserted between …\nAn iterator adaptor to insert a particular value between …\nIterate <code>iterable</code> with a particular value created by a …\nAn iterator adaptor to insert a particular value created …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a buffer with the produced items that was not …\nReturn a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …\nReturn an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …\nConstructs a <code>GroupingMap</code> to be used later with one of the …\nConstructs a <code>GroupingMap</code> to be used later with one of the …\nExtract the value of an either over two equivalent types.\nReturn the inner value.\nReturn the value in the continue or done.\nConvert the inner value to an iterator.\n<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …\nSplit the <code>PutBack</code> into its parts.\nCreate an iterator over the “cartesian product” of …\nIf Right, return true otherwise, return false. Equivalent …\nReturn true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.\nReturn true if the value is the <code>Left</code> variant.\nIf Left, return true otherwise, return false. Exclusive …\nReturn true if the value is the <code>Right</code> variant.\nIf Right, return true otherwise, return false. Exclusive …\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nCreates a new iterator that infinitely applies function to …\nCreate an iterator running multiple iterators in lockstep.\nCombine all iterator elements into one String, separated …\nCombine all iterator elements into one String, separated …\nReturns the length of a combination produced by this …\nSort the k smallest elements into a new iterator, in …\nCreate an iterator that merges elements of the contained …\nReturn an iterator adaptor that flattens an iterator of …\nCreate an iterator that merges elements of the contained …\nReturn an iterator adaptor that flattens an iterator of …\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nIf <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nConvert each item of the iterator using the <code>Into</code> trait.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …\nReturn an iterator adaptor that applies the provided …\nSee <code>.map_ok()</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nApply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …\nReturn the maximum value of the iterable.\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn all maximum elements of an iterator.\nReturn all maximum elements of an iterator, as determined …\nReturn all minimum elements of an iterator, as determined …\nCreate an iterator that merges elements in <code>i</code> and <code>j</code>.\nReturn an iterator adaptor that merges the two base …\nReturn an iterator adaptor that merges the two base …\nReturn an iterator adaptor that merge-joins items from the …\nCreate an iterator that merges items from both this and …\nReturn the minimum value of the iterable.\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn all minimum elements of an iterator.\nReturn all minimum elements of an iterator, as determined …\nReturn all minimum elements of an iterator, as determined …\nReturn the minimum and maximum elements in the iterator.\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn the minimum and maximum element of an iterator, as …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn the minimum and maximum element of an iterator, as …\nGroups elements from the <code>GroupingMap</code> source by key and …\nReturn an iterator adaptor that iterates over the …\nAn iterator adaptor that allows the user to peek at …\nAn iterator adaptor that allows the user to peek at …\nConverts an iterator of tuples into a tuple of containers.\nUnzip this iterator into multiple collections.\nConverts an iterator of tuples into a tuple of containers.\nAn iterator that generalizes <em>.zip()</em> and allows running …\nReturns the (current) length of the pool from which …\nAdvances the iterator and returns the next items grouped …\nReturns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …\nReturns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …\nReturns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …\nReturn an iterator adaptor that pads the sequence to a …\nPartition a sequence using predicate <code>pred</code> so that elements …\nCollect all iterator elements into one of two partitions. …\nPartition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…\nWorks exactly like <code>.next()</code> with the only difference that …\nWorks exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>\nA drop-in replacement for <code>std::iter::Peekable</code> which adds a …\nReturns a reference to the <code>nth</code> value without advancing the …\nPass a reference to the next iterator element to the …\nReturn an iterator adaptor that borrows from this iterator …\nReturn an iterator adaptor that iterates over all …\nReturn the position of the maximum element in the iterator.\nReturn the position of the maximum element in the …\nReturn the position of the maximum element in the …\nReturn the position of the minimum element in the iterator.\nReturn the position of the minimum element in the …\nReturn the position of the minimum element in the …\nReturn the positions of the minimum and maximum elements in\nReturn the postions of the minimum and maximum elements of …\nReturn the postions of the minimum and maximum elements of …\nReturn an iterator adaptor that yields the indices of all …\nReturn an iterator that iterates through the powerset of …\n“Lift” a function of the values of an iterator so that …\nGroups elements from the <code>GroupingMap</code> source by key and …\nIterate over the entire iterator and multiply all the …\nCreate an iterator where you can put back a single item\nPut back a single value to the front of the iterator.\nPuts x in front of the iterator. The values are yielded in …\nCreate an iterator where you can put back multiple values …\nReturn an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.\nThe boxed iterator.\nReturn either value of left, right, or the product of <code>f</code> …\nAn iterator source that produces elements indefinitely by …\nCreate an iterator that produces <code>n</code> repetitions of <code>element</code>.\nReset the peeking “cursor”\nIterate <code>iterable</code> in reverse.\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nIf <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nApply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\nAssign to each reference in <code>self</code> from the <code>from</code> iterator, …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nSort all iterator elements into a new iterator in …\nInternal state that will be passed to the closure on the …\nReturn an iterator adaptor that steps <code>n</code> elements in the …\nThe concrete iterator types.\nGroups elements from the <code>GroupingMap</code> source by key and …\nIterate over the entire iterator and add all the elements.\nReturn an iterator adaptor that borrows from a <code>Clone</code>-able …\nSplit into an iterator pair that both yield all elements …\nTraits helpful for using certain <code>Itertools</code> methods in …\nAccumulate the elements in the iterator in a tree-like …\n<code>.try_collect()</code> is more convenient way of writing …\nReturn an iterator adaptor that iterates over the …\nReturn an iterator over all contiguous windows producing …\nReturn an iterator that groups the items in tuples of a …\nCreates a new unfold source with the specified closure as …\nReturn an iterator adaptor that filters out elements that …\nReturn an iterator adaptor that filters out elements that …\nReturns the left value\nReturns the right value\nReturn an iterator adaptor that applies a mutating function\nReturn an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nReturn an iterator adaptor that wraps each element in a …\nput back value <code>value</code> (builder method)\nConverts the arguments to iterators and zips them.\nIterate <code>i</code> and <code>j</code> in lock step.\nCreate an iterator which iterates over both this and the …\nCreate an iterator which iterates over both this and the …\nAn iterator over <code>N</code> elements of the iterator at a time.\nLike <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can …\nAn iterator that links two iterators together, in a chain.\nAn iterator that clones the elements of an underlying …\nAn iterator that copies the elements of an underlying …\nAn iterator that repeats endlessly.\nAn iterator able to yield elements from both ends.\nAn iterator that yields nothing.\nAn iterator that yields the current count and the element …\nAn iterator that knows its exact length.\nExtend a collection with the contents of an iterator.\nAn iterator that filters the elements of <code>iter</code> with …\nAn iterator that uses <code>f</code> to both filter and map elements …\nAn iterator that maps each element to an iterator, and …\nAn iterator that flattens one level of nesting in an …\nAn iterator where each iteration calls the provided …\nConversion from an <code>Iterator</code>.\nAn iterator that yields <code>None</code> forever after the underlying …\nAn iterator that always continues to yield <code>None</code> when …\nAn iterator that calls a function with a reference to each …\nAn iterator adapter that places a separator between all …\nAn iterator adapter that places a separator between all …\nWhich kind of iterator are we turning this into?\nConversion into an <code>Iterator</code>.\nThe type of the elements being iterated over.\nThe type of the elements being iterated over.\nA trait for dealing with iterators.\nAn iterator that maps the values of <code>iter</code> with <code>f</code>.\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator over the mapped windows of another iterator.\nAn iterator that yields an element exactly once.\nAn iterator that yields a single element of type <code>A</code> by …\nAn iterator with a <code>peek()</code> that returns an optional …\nTrait to represent types that can be created by …\nAn iterator that repeats an element endlessly.\nAn iterator that repeats an element an exact number of …\nAn iterator that repeats elements of type <code>A</code> endlessly by …\nA double-ended iterator with the direction inverted.\nAn iterator to maintain state while iterating another …\nAn iterator that skips over <code>n</code> elements of <code>iter</code>.\nAn iterator that rejects elements while <code>predicate</code> returns …\nObjects that have a notion of <em>successor</em> and <em>predecessor</em> …\nAn iterator for stepping iterators by a custom amount.\nA new iterator where each successive item is computed …\nTrait to represent types that can be created by summing up …\nAn iterator that only iterates over the first <code>n</code> iterations …\nAn iterator that only accepts elements while <code>predicate</code> …\nAn iterator that reports an accurate length using …\nA type that upholds all invariants of <code>Step</code>.\nAn iterator that iterates two other iterators …\nAdvances the iterator from the back by <code>n</code> elements.\nAdvances the iterator by <code>n</code> elements.\nTests if every element of the iterator matches a predicate.\nTests if any element of the iterator matches a predicate.\nReturns an iterator over <code>N</code> elements of the iterator at a …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nBorrows an iterator, rather than consuming it.\nConverts the arguments to iterators and links them …\nTakes two iterators and creates a new iterator over both …\nCreates an iterator which <code>clone</code>s all of its elements.\nLexicographically compares the elements of this <code>Iterator</code> …\nLexicographically compares the elements of this <code>Iterator</code> …\nTransforms an iterator into a collection.\nCollects all the items from an iterator into a collection.\nCreates an iterator which copies all of its elements.\nConsumes the iterator, counting the number of iterations …\nRepeats an iterator endlessly.\nCreates a <code>Flatten</code> iterator from the default value of <code>I</code>.\nCreates a <code>Chain</code> from the default values for <code>A</code> and <code>B</code>.\nCreates a <code>Cloned</code> iterator from the default value of <code>I</code>\nCreates a <code>Copied</code> iterator from the default value of <code>I</code>\nCreates an <code>Enumerate</code> iterator from the default value of <code>I</code>\nCreates a <code>Fuse</code> iterator from the default value of <code>I</code>.\nCreates a <code>Rev</code> iterator from the default value of <code>I</code>\nCreates an iterator that yields nothing.\nCreates an iterator which gives the current iteration …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nDetermines if the elements of this <code>Iterator</code> are equal to …\nExtends a collection with the contents of an iterator.\nExtends a collection with exactly one element.\nReserves capacity in a collection for the given number of …\nCreates an iterator which uses a closure to determine if …\nCreates an iterator that both filters and maps.\nSearches for an element of an iterator that satisfies a …\nApplies function to the elements of iterator and returns …\nCreates an iterator that works like map, but flattens …\nCreates an iterator that flattens nested structure.\nFolds every element into an accumulator by applying an …\nCalls a closure on each element of an iterator.\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the value that would be obtained by taking the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new iterator where each iteration calls the …\nCreates a new iterator where each iteration calls the …\nCreates a value from an iterator.\nCreates an iterator which ends after the first <code>None</code>.\nDetermines if the elements of this <code>Iterator</code> are …\nDetermines if the elements of this <code>Iterator</code> are …\nDoes something with each element of an iterator, passing …\nCreates a new iterator which places a copy of <code>separator</code> …\nCreates a new iterator which places an item generated by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator from a value.\nReturns an iterator over the remaining elements of the …\nReturns <code>true</code> if the iterator is empty.\nChecks if the elements of this iterator are partitioned …\nChecks if the elements of this iterator are sorted.\nChecks if the elements of this iterator are sorted using …\nChecks if the elements of this iterator are sorted using …\nConsumes the iterator, returning the last element.\nDetermines if the elements of this <code>Iterator</code> are …\nReturns the exact remaining length of the iterator.\nDetermines if the elements of this <code>Iterator</code> are …\nTakes a closure and creates an iterator which calls that …\nCreates an iterator that both yields elements based on a …\nCalls the given function <code>f</code> for each contiguous window of …\nReturns the maximum element of an iterator.\nReturns the element that gives the maximum value with …\nReturns the element that gives the maximum value from the …\nReturns the minimum element of an iterator.\nReturns the element that gives the minimum value with …\nReturns the element that gives the minimum value from the …\nDetermines if the elements of this <code>Iterator</code> are not equal …\nAdvances the iterator and returns the next value.\nOverflow Behavior\nRemoves and returns an element from the end of the …\nAdvances the iterator and returns an array containing the …\nConsume and return the next value of this iterator if a …\nConsume and return the next item if it is equal to <code>expected</code>…\nReturns the <code>n</code>th element of the iterator.\nReturns the <code>n</code>th element from the end of the iterator.\nCreates an iterator that yields an element exactly once.\nCreates an iterator that lazily generates a value exactly …\nLexicographically compares the <code>PartialOrd</code> elements of this …\nLexicographically compares the elements of this <code>Iterator</code> …\nConsumes an iterator, creating two collections from it.\nReorders the elements of this iterator <em>in-place</em> according …\nReturns a reference to the next() value without advancing …\nReturns a mutable reference to the next() value without …\nCreates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …\nSearches for an element in an iterator, returning its …\nMethod which takes an iterator and generates <code>Self</code> from the …\nIterates over the entire iterator, multiplying all the …\nReduces the elements to a single one, by repeatedly …\nCreates a new iterator that endlessly repeats a single …\nCreates a new iterator that repeats a single element a …\nCreates a new iterator that repeats elements of type <code>A</code> …\nReverses an iterator’s direction.\nSearches for an element of an iterator from the back that …\nAn iterator method that reduces the iterator’s elements …\nSearches for an element in an iterator from the right, …\nAn iterator adapter which, like <code>fold</code>, holds internal …\nReturns the bounds on the remaining length of the iterator.\nCreates an iterator that skips the first <code>n</code> elements.\nCreates an iterator that <code>skip</code>s elements based on a …\nCreates an iterator starting at the same point, but …\nReturns the number of <em>successor</em> steps required to get from …\nCreates a new iterator where each successive item is …\nMethod which takes an iterator and generates <code>Self</code> from the …\nSums the elements of an iterator.\nCreates an iterator that yields the first <code>n</code> elements, or …\nCreates an iterator that yields elements based on a …\nFallibly transforms an iterator into a collection, short …\nApplies function to the elements of iterator and returns …\nAn iterator method that applies a function as long as it …\nAn iterator method that applies a fallible function to …\nReduces the elements to a single one by repeatedly …\nThis is the reverse version of <code>Iterator::try_fold()</code>: it …\nConverts an iterator of pairs into a pair of containers.\nConverts the arguments to iterators and zips them.\n‘Zips up’ two iterators into a single iterator of …\nA “meta iterator adaptor”. Its closure receives a …\nAn iterator for the elements in a single chunk.\nAn iterator that yields the Chunk iterators.\nAn iterator over all windows,wrapping back to the first …\nAn iterator adaptor that may join together adjacent …\nAn iterator to iterate through all the <code>k</code>-length …\nAn iterator to iterate through all the <code>n</code>-length …\nAn iterator that maps an iterator of tuples like …\nAn iterator adaptor that removes repeated duplicates.\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adaptor that removes repeated duplicates, …\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to filter for duplicate elements.\nIterator returned for the error case of …\nAn iterator adapter to filter and apply a transformation …\nAn iterator adapter to filter values within a nested …\nAn iterator adaptor that flattens <code>Result::Ok</code> values and …\nFormat all iterator elements lazily, separated by <code>sep</code>.\nFormat all iterator elements lazily, separated by <code>sep</code>.\nAn iterator for the elements in a single group.\n<code>GroupBy</code> is the storage for the lazy grouping operation.\n<code>GroupingMap</code> is an intermediate struct for efficient …\n<code>GroupingMapBy</code> is an intermediate struct for efficient …\nAn iterator that yields the Group iterators.\nAn iterator adaptor that alternates elements from two …\nAn iterator adaptor that alternates elements from the two …\nAn iterator adaptor to insert a particular value between …\nAn iterator adaptor to insert a particular value created …\n<code>ChunkLazy</code> is the storage for a lazy chunking operation.\nAn iterator that infinitely applies function to value and …\nAn iterator adaptor that merges an abitrary number of base …\nAn iterator adaptor that merges an abitrary number of base …\nAn iterator adapter to apply <code>Into</code> conversion to each …\nAn iterator adapter to apply a transformation within a …\nSee <code>MapOk</code>.\nAn iterator adaptor that merges the two base iterators in …\nAn iterator adaptor that merges the two base iterators in …\nAn iterator adaptor that merge-joins items from the two …\nSee <code>multipeek()</code> for more information.\nAn iterator adaptor that iterates over the cartesian …\nAn iterator adaptor that pads a sequence to a minimum …\nSee <code>peek_nth()</code> for more information.\nAn iterator adaptor that takes items while a closure …\nAn iterator adaptor that iterates through all the <code>k</code>…\nAn iterator adapter to get the positions of each element …\nAn iterator to iterate through the powerset of the …\nAn iterator that produces only the <code>T</code> values as long as the …\nAn iterator adaptor that iterates over the cartesian …\nAn iterator adaptor that allows putting back a single item …\nAn iterator adaptor that allows putting multiple items in …\nA wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …\nSee <code>repeat_call</code> for more information.\nAn iterator that produces <em>n</em> repetitions of an element.\nAn iterator adaptor that steps a number elements in the …\nAn iterator adaptor that borrows from a <code>Clone</code>-able iterator\nOne half of an iterator pair where both return the same …\nAn iterator over a incomplete tuple.\nAn iterator to iterate through all combinations in a <code>Clone</code>…\nAn iterator over all contiguous windows that produces …\nAn iterator that groups the items in tuples of a specific …\nSee <code>unfold</code> for more information.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to filter out duplicate elements.\nAn iterator adapter to apply a mutating function to each …\nAn iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …\nAn iterator adaptor that wraps each element in an <code>Position</code>.\nSee <code>multizip</code> for more information.\nAn iterator which iterates two other iterators …\nAn iterator which iterates two other iterators …\nThe boxed iterator.\nInternal state that will be passed to the closure on the …\nImplemented for homogeneous tuples of size up to 12.\nCompatibility for <code>proc_macro</code> diagnostics, which are …\nGraph representation stages for Hydroflow graphs.\nAST for surface syntax, modelled on <code>syn</code>’s ASTs.\nPretty, human-readable printing of <code>proc_macro2::Span</code>s.\nUtility methods for processing singleton references: …\nUnion-find data structure, see <code>UnionFind</code>.\nDiagnostic. A warning or error (or lower <code>Level</code>) with a …\nAn error.\nA help message.\nDiagnostic reporting level.\nA note.\nA serializable and deserializable version of <code>Span</code>. Cannot …\nA warning.\nColumn number, one-indexed.\nEmit the diagnostic. Only works from the <code>proc_macro</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this level is <code>Level::Error</code>.\nIf this diagnostic’s level is <code>Level::Error</code>.\nSeverity level.\nLine number, one-indexed.\nHuman-readable message.\nThe source file path.\nSpan (source code location).\nCreate a new diagnostic from the given span, level, and …\nConverts this into a serializable and deserializable …\nUsed to emulate <code>Diagnostic::emit</code> by turning this …\nPush, Pull, Comp, or Hoff polarity.\nComputation (yellow)\nA directed multigraph where an vertex’s inbound and …\nDot (Graphviz) graphs.\nElided, unspecified port. We have this variant, rather …\nWraper around <code>HydroflowGraph</code> to build a flat graph from …\nID to identify an edge.\nA node, corresponding to an operator or a handoff.\nID to identify a node (operator or handoff) in …\nID to identify a subgraph in <code>HydroflowGraph</code>.\nA handoff point, used between subgraphs (or within a …\nHandoff (grey) – not a color for operators, inserted …\nAn abstract “meta graph” representation of a Hydroflow …\nAn integer value: <code>[0]</code>, <code>[1]</code>, etc. Can be negative although …\nMermaid graphs.\nModule Boundary, used for importing modules. Only exists …\nOperator generic arguments, split into specific categories.\nAn operator.\nMeta-data relating to operators which may be useful …\nA name or path. <code>[pos]</code>, <code>[neg]</code>, etc. Can use <code>::</code> separators …\nHelper struct for <code>PortIndex</code> which keeps span information …\nPull (green)\nPush (blue)\nConfiguration for writing graphs.\nEnum for choosing between mermaid and dot graph writing.\nAdd a single <code>HfStatement</code> line to this <code>HydroflowGraph</code>.\nArguments provided by the user into the operator as …\nUnparsed arguments, for singleton parsing.\nEmit this <code>HydroflowGraph</code> as runnable Rust source code …\nFormats self as a human-readable string for error messages.\nAssert that <code>self</code> is in a consistent state, for debugging. …\nBuild into an unpartitioned <code>HydroflowGraph</code>, returning a …\nThe main function of this module. Compiles a <code>HfCode</code> AST …\nReturn <code>Err(self)</code> if there is a conflict.\nThe degree (number of edges/vertices) going into <code>v</code>, i.e. …\nThe degree (number of edges/vertices) coming out of <code>v</code>, …\nGet the source and destination vertex IDs for the given …\nGet the <code>src</code> and <code>dst</code> for an edge: …\nReturn an iterator over all edge IDs <code>E</code>.\nIterator of all edge IDs <code>GraphEdgeId</code>.\nGet the source and destination ports for an edge: …\nReturn an iterator over all edges in form <code>(E, (V, V))</code>.\nIterator over all edges: …\nRemoves missing unions and tees. Must be applied BEFORE …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the Hydroflow code AST into a graph builder.\nConvert the Hydroflow code AST into a graph builder.\nFor a <code>Ported</code> value like <code>[port_in]name[port_out]</code>, get the …\nOperator generic (type or lifetime) arguments.\nGeneric arguments.\nGets the generic arguments for the operator.\nGeneral graph algorithm utility functions\nPort values used as this operator’s input.\nCreates an edge going from <code>src</code> to <code>dst</code> and returns the edge …\nInsert an edge between nodes thru the given ports.\nInserts a node between two existing nodes connected by the …\nFor an <code>edge</code> from <code>A --&gt; B</code>, insert a new vertex <code>V</code> along that …\nInsert a node, assigning the given varname.\nInsert an operator instance for the given node. Panics if …\nAssign all operator instances if not set. Write diagnostic …\nCreate a subgraph consisting of <code>node_ids</code>. Returns an error …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> is not <code>PortIndexValue::Elided</code>.\nReturns the the stratum number of the largest (latest) …\nWhen modules are imported into a flat graph, they come …\nConvert into a mermaid graph. Ignores subgraphs.\nCreates an empty <code>DiMulGraph</code>.\nCreate a new empty graph builder.\nCreate a new empty <code>HydroflowGraph</code>.\nWill not render handoffs if set.\nWill not render pull/push shapes if set.\nWill not render singleton references if set.\nSubgraphs will not be rendered if set.\nVariable names will not be rendered if set.\nGet a node with its operator instance (if applicable).\nColor mode (pull vs. push, handoff vs. comp) for nodes. …\nDegree into a node, i.e. the number of predecessors.\nDegree out of a node, i.e. the number of successors.\nIterator of node IDs <code>GraphNodeId</code>.\nGet the <code>OperatorInstance</code> for a given node. Node must be an …\nPredecessor edges, iterator of <code>GraphEdgeId</code> of incoming …\nPredecessor nodes, iterator of <code>GraphNodeId</code>.\nPredecessors, iterator of <code>(GraphEdgeId, GraphNodeId)</code> of …\nGets the singletons referenced by a node. Returns an empty …\nGet subgraph for node.\nSuccessor edges, iterator of <code>GraphEdgeId</code> of outgoing edges.\nSuccessor nodes, iterator of <code>GraphNodeId</code>.\nSuccessors, iterator of <code>(GraphEdgeId, GraphNodeId)</code> of …\nGet the debug variable name attached to a graph node.\nIterator over <code>(GraphNodeId, &amp;Node)</code> pairs.\nName of the operator (will match <code>OperatorConstraints::name</code>…\nOp text will only be their name instead of the whole …\nOp text will exclude any line that starts with “use”.\nOpens this as dot/graphviz graph in the Graphviz Online …\nOpens the graph based on <code>graph_type</code>, which can be parsed …\nOpens this as a mermaid graph in the mermaid.live browser …\nHydroflow’s operators\nPort values used as this operator’s output.\nMain method for this module. Partions a flat <code>HydroflowGraph</code>…\nLifetime persistence arguments. Corresponds to a prefix of …\nReturn an iterator of all edge IDs going into <code>v</code>.\nReturn an iterator of all predecessor vertex IDs of <code>v</code>.\nReturn an iterator of all predecessor edge IDs <em>and</em> vertex …\nRemove an edge from the graph. If the edgeId is found then …\nRemoves an edge and its corresponding ports and edge type …\nRemoves a node from its subgraph. Returns true if the node …\nRemove the node <code>node_id</code> but preserves and connects the …\nFor a vertex with one incoming edge and one outgoing edge, …\nRemove a vertex from the graph, it must have no edges to …\nSet the singletons referenced for the <code>node_id</code> operator. …\nSet subgraph’s laziness, returning the old value.\nSet subgraph’s stratum number, returning the old value …\nSingleton references within the operator arguments.\nReturn the source code span of the node (for operators) or …\nReturns the span of this port value.\nNodes belonging to the given subgraph.\nIterator over all subgraph IDs.\nGets the stratum number of the subgraph.\nIterator over all subgraphs, ID and members: …\nReturn an iterator of all edge IDs coming out of <code>v</code>.\nReturn an iterator of all successor vertex IDs of <code>v</code>.\nReturn an iterator of all successor edge IDs <em>and</em> vertex …\nConvert back into surface syntax.\nWrites this graph as DOT (graphviz) into a string.\nWrites this graph as mermaid into a string.\nReturn the name of the node as a string, excluding …\nReturn the node as a human-readable string.\nType persistence arguments. Corersponds to a (suffix) of …\nCreates a <code>DiMulGraph</code> with pre-allocated memory for <code>capacity</code>…\nWrites this graph as DOT (graphviz) into the given <code>Write</code>.\nWrites this graph as mermaid into the given <code>Write</code>.\nConvert into a mermaid graph. Ignores subgraphs.\nConvert back into surface syntax.\nThe span of the output out of the handoff.\nThe span of the import!() expression that imported this …\nIf this module is an input or output boundary.\nThe span of the input into the handoff.\nFinds the strongly connected components in the graph. A …\nTopologically sorts a set of nodes. Returns a list where …\nComputers the topological sort of the nodes of a possibly …\nThe delay (soft barrier) type, for each input to an …\nA specific number of named ports.\n<code>OperatorConstraints::write_fn</code> for unary identity operators.\nMonotone accumulation: can delay to reduce flow rate, but …\nMutability.\n<code>OperatorConstraints::write_fn</code> for the null operator - an …\nAll Hydroflow operators.\nOperator categories, for docs.\nAn instance of this struct represents a single hydroflow …\nThe code generated and returned by a …\nPersistence lifetimes: <code>&#39;tick</code>, <code>&#39;static</code>, or <code>&#39;mutable</code>.\nSpecification of the named (or unnamed) ports for an …\nConvenience range: exactly zero.\nConvenience range: exactly one.\nConvenience range: zero or more (any number).\nAn object-safe version of <code>RangeBounds</code>.\nPersistene across all ticks.\nInput must be collected over the preceeding stratum.\nInput must be collected over the previous tick.\nPersistence for one tick at-a-time only.\nInput must be collected over the previous tick but also …\nAny number of unnamed (or optionally named) ports.\nContext arguments provided to <code>OperatorConstraints::write_fn</code>…\nType alias for <code>OperatorConstraints::write_fn</code>’s type.\nArguments provided by the user into the operator as …\nSame as <code>Self::arguments</code> but with only <code>StateHandle</code>s, no …\nOperator categories, for docs.\nReturns if <code>item</code> is contained in this range.\n<code>context</code> ident, the name of the provided …\nHuman description, for docs.\nEnd (upper) bound.\nFind an operator by <code>GraphNode</code>.\nFind an operator by an AST <code>Operator</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInput argument range required to not show an error.\nOutput argument range required to not show an error.\nIf this operator has a singleton reference output. For …\nTurn this range into a human-readable string.\n<code>df</code> ident, the name of the …\nIdent the iterator or pullerator should be assigned to.\nHelper to write the <code>write_iterator</code> portion of …\nDetermines if this input must be preceeded by a stratum …\nInput operator idents (or ref idents; used for pull).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf this operator receives external inputs and therefore …\nIf a pull iterator (true) or pusherator (false) should be …\nGenerate a (almost certainly) unique identifier with the …\nHuman-readible heading name, for docs.\nOperator’s name.\nNode ID identifying this operator in the flat or …\nHelper to write the <code>write_iterator</code> portion of …\nNumber of arguments i.e. <code>operator(a, b, c)</code> has <code>num_args = 3</code>…\nOperator instance arguments object.\nOperator name.\nThe source span of this operator.\nGet the operator lookup table, generating it if needed.\nOutput operator idents (or ref idents; used for push).\nHow many persistence lifetime arguments can be provided.\nWhat named or numbered input ports to expect?\nWhat named or numbered output ports to expect?\n<code>hydroflow</code> crate name for <code>use #root::something</code>.\nIdent for the singleton output of this operator, if any.\nInput argument range required to not show a warning.\nOutput argument range required to not show an warning.\nStart (lower) bound.\nSubgraph ID in which this operator is contained.\nHow many generic type arguments can be provided.\nThe operator’s codegen. Returns code that is emited is …\nIterator (or pusherator) code inside the subgraphs. The …\nCode which runs after iterators have been run. Mainly for …\nCode which runs once outside the subgraph to set up any …\nPort can either be an int or a name (path).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOutput the operator as a formatted string using …\nHelper struct which displays the span as <code>row:col</code> for human …\nHelper struct which displays the span as <code>path:row:col</code> for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReplaces singleton references <code>#my_var</code> with the code needed …\nSame as <code>postprocess_singletons</code> but generates just the …\nFinds all the singleton references <code>#my_var</code> and appends …\nUnion-find data structure.\nFinds the “representative” item for <code>k</code>. Each set of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>UnionFind</code>, same as <code>Default::default()</code>.\nReturns if <code>a</code> and <code>b</code> are equivalent, i.e. in the same set.\nCombines two items <code>a</code> and <code>b</code> as equivalent, in the same set.\nCreates a new <code>UnionFind</code> with the given key capacity …\nTrait for Semiring Addition.\nThe type of atoms for this lattice.\nThe iter type iterating the antichain atoms.\nTrait to atomize a lattice into individual elements. For …\nA <code>Conflict</code> lattice, stores a single instance of <code>T</code> and goes …\nTrait for recursively revealing the underlying types …\nDominating pair compound lattice.\nTrait to check if a lattice instance is bottom (⊥).\nDerives lattice <code>IsBot</code>.\nTrait to check if a lattice instance is top (⊤) and …\nDerives lattice <code>IsTop</code>.\nAlias trait for lattice types.\n<code>#[derive(Lattice)]</code> Macro\nSemilattice bimorphism. Lattice merge must distribute over …\nSame as <code>From</code> but for lattices.\nDerives <code>LatticeFrom</code>.\nSemilattice morphism. Lattice merge must distribute over …\nTrait for lattice partial order comparison PartialOrd is …\nDerives [<code>PartialEq</code>], [<code>PartialOrd</code>], and <code>LatticeOrd</code> together.\nA totally ordered max lattice. Merging returns the larger …\nTrait for lattice merge (AKA “join” or “least upper …\nDerives lattice <code>Merge</code>.\nA totally ordered min lattice. Merging returns the smaller …\nTrait for Semiring Multiplication.\nNaive lattice compare, based on the <code>Merge::merge</code> function.\nTrait to define a one in a semiring.\nThe output lattice type.\nThe output lattice type.\nPair compound lattice.\nBimorphism which pairs up the two input lattices.\nA <code>Point</code> lattice, corresponding to a single instance of <code>T</code>.\nThe underlying type when revealed.\nAlias trait for semirings.\nVec-union compound lattice.\nAdds a new “bot” value to the nested lattice type.\nAdds a new “top” value to the nested lattice type.\nTrait to check if semiring contains a zero.\nThe “left” Lattice of the Pair lattice.\nAdd-assign <code>other</code> into self.\nAdd <code>this</code> and <code>delta</code> together, returning the new value.\nModule for definiting algebraic structures and properties.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as an exclusive reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nReveal the inner value as a shared reference.\nAtomize self: convert into an iter of atoms.\nThe “right” Lattice of the Pair lattice.\nExecutes the function.\nExecutes the function.\nConverts a closure to a bimorphism. Does not check for …\nConverts a closure to a morphism. Does not check for …\nSimple singleton or array collection with <code>cc_traits</code> …\nReveals the underlying lattice types recursively.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>Max</code> lattice instance from an <code>Into&lt;T&gt;</code> value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nGets the inner by value, consuming self.\nReturns if <code>self</code> is lattice bottom (⊥).\nReturns if <code>self</code> is lattice top (⊤).\nThe <code>Key</code> of the  dominating pair lattice, usually a …\nConvert from the <code>Other</code> lattice into <code>Self</code>.\nModule containing the <code>MapUnion</code> lattice and aliases for …\nModule containing the <code>MapUnionWithTombstones</code> lattice and …\nMerge <code>other</code> into the <code>self</code> lattice.\nMerge <code>this</code> and <code>delta</code> together, returning the new value.\nMultiply-assign <code>other</code> into self.\nMultiply <code>this</code> and <code>delta</code> together, returning the new value.\nNaive compare based on the <code>Merge::merge</code> method. This …\nCreate a new <code>Conflict</code> lattice instance from a value.\nCreate a <code>DomPair</code> from the given <code>Key</code> and <code>Val</code>.\nCreate a new <code>Max</code> lattice instance from a <code>T</code>.\nCreate a new <code>Min</code> lattice instance from a <code>T</code>.\nCreate a <code>Pair</code> from the given values.\nCreate a new <code>Point</code> lattice instance from a value.\nCreate a new <code>VecUnion</code> from a <code>Vec</code> of <code>Lat</code> instances.\nCreate a new <code>WithBot</code> lattice instance from a value.\nCreate a new <code>WithTop</code> lattice instance from a value.\nCreate a new <code>Conflict</code> lattice instance from a value using …\nCreate a <code>DomPair</code> from the given <code>Into&lt;Key&gt;</code> and <code>Into&lt;Val&gt;</code>.\nCreate a new <code>Min</code> lattice instance from an <code>Into&lt;T&gt;</code> value.\nCreate a <code>Pair</code> from the given values, using <code>Into</code>.\nCreate a new <code>Point</code> lattice instance from a value using <code>Into</code>…\nCreate a new <code>VecUnion</code> from an <code>Into&lt;Vec&lt;Lat&gt;&gt;</code>.\nCreate a new <code>WithBot</code> lattice instance from a value using …\nCreate a new <code>WithTop</code> lattice instance from a value using …\nReturns the one element of the semiring. Identity for the …\nModule containing the <code>BinaryTrust</code> applications.\nModule containing the <code>SetUnion</code> lattice and aliases for …\nModule containing the <code>SetUnionWithTombstones</code> lattice and …\nHelper test utils to test lattice implementation …\nModule containing the <code>UnionFind</code> lattice and aliases for …\nThe value stored inside. This should not be mutated.\nReturns the zero element of the semiring. Identify for the …\nDefines an abelian group structure.\nDefines the absorbing_element property.\nDefines the associativity property.\nDefines the bilinearity property\nDefines a commutative monoid structure.\nDefines a commutative ring structure.\nDefines the commutativity property.\nDefines the distributive property\nDefines a field structure.\nLoop through each algebraic property in …\nDefines a group structure.\nDefines the idempotency property.\nDefines the identity property.\nDefines an integral domain structure.\nDefines the inverse property.\nDefines the left distributive property\nDefines the linearity property\nDefines a monoid structure.\nDefines a no-nonzero-zero-divisors property.\nDefines the non_zero inverse property.\nDefines the right distributive property.\nDefines a ring structure.\nDefines a semigroup structure.\nDefines a semiring structure.\nCollection exposing a reference to its back element.\nCollection exposing a mutable reference to its back …\nCollection with known capacity.\nCollection with mutable capacity.\nClearable collection.\nAbstract collection.\nAbstract collection that can be mutably referenced.\nAbstract collection that can be immutably referenced.\nImmutable double-ended queue.\nMutable double-ended queue.\nCollection exposing a reference to its front element.\nCollection exposing a mutable reference to its front …\nQueryable collection.\nQueryable map.\nMutably queryable map.\nMutably queryable collection.\nMutable collection where new elements can be inserted.\nType of the items of the collection.\nType of mutable references to items of the collection.\nType of references to items of the collection.\nIterable collection.\nIterator type.\nMutably iterable collection.\nIterator type.\nType of the keys indexing each item of the collection.\nType of references to keys of the collection.\nAbstract keyed collection.\nAbstract keyed collection whose key can be referenced.\nSized collection.\nImutable map data structure.\nMutable map where new new key-value pairs can be inserted.\nMutable map data structure.\nThe output of the insertion function.\nThe output of the insertion function.\nThe output of the push function.\nThe output of the push function.\nMutable collection where elements can be popped from the …\nMutable collection where elements can be popped from the …\nMutable collection where new elements can be pushed on the …\nMutable collection where new elements can be pushed on the …\nMutable collection where elements can be removed from.\nCollection that can extend their capacity.\nImutable set data structure.\nMutable set data structure.\nCollection where each item reference can be converted into …\nCollection where each item reference can be converted into …\nKeyed collection where each key reference can be converted …\nImutable slab data structure.\nMutable slab data structure.\nImmutable stack data structure.\nMutable stack data structure.\nImmutable array data structure (conventionally nammed “…\nImmutable indexable deque.\nMutable indexable deque.\nMutable Vec data structure.\nCollection that can be created with a minimum given …\nGet a reference to the back element of the collection.\nGet a mutable reference to the back element of the …\nReturns the current capacity of the collection.\nRemove all the elements of the collection.\nChecks if the collection contains an item behind the given …\nAutomatically defines the <code>CollectionMut::upcast_item_mut</code> …\nAutomatically defines the <code>CollectionRef::upcast_item_ref</code> …\nAutomatically defines the <code>KeyedRef::upcast_item_ref</code> …\nGet a reference to the front element of the collection.\nGet a mutable reference to the front element of the …\nReturns a reference to the item stored behind the given …\nReturns the key-value pair matching the given <code>key</code>.\nReturns the key-value pair matching the given <code>key</code>, with a …\nReturns a mutable reference to the item stored behind the …\nInsert a new element in the collection.\nInsert a new key-value pair in the collection.\nChecks if the collection is empty.\nCreate an iterator over the items of the collection.\nCreate an iterator over the mutable items of the …\nReturns the number of elements in the collection.\nRemove the back element of the collection and return it …\nRemove the front element of the collection and return it …\nPush a new element on the back of the collection.\nPush a new element on the front of the collection.\nRemove the element identified by the given <code>key</code>.\nReserve enough memory for <code>edditional</code> more elements.\nAutomatically defines the <code>CollectionMut::upcast_item_mut</code> …\nAutomatically defines the <code>SimpleCollectionRef::into_ref</code> …\nAutomatically defines the <code>SimpleKeyedRef::into_ref</code> …\nChanges an item mutable reference into a shorter lived …\nChanges an item reference into a shorter lived reference.\nChanges a key reference into a shorter lived reference.\nCreates a new instance of <code>Self</code> with the given minimum …\nAn array wrapper representing a fixed-size map.\nAn array wrapper representing a fixed-size set (modulo …\nA key-value entry wrapper representing a singleton map.\nA type that will always be an empty set.\nTrait for transforming the values of a map without …\nOutput type, should be <code>Self</code> but with <code>OldVal</code> replaced with …\nA key-value entry wrapper around <code>Option&lt;(K, V)&gt;</code> …\nA wrapper around <code>Option</code>, representing either a singleton …\nA key-value entry wrapper representing a singleton map.\nA wrapper around an item, representing a singleton set.\nA <code>Vec</code>-wrapper representing a naively implemented map.\nA <code>Vec</code>-wrapper representing a naively-implemented set.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKeys, should be the same length as and correspond 1:1 to …\nKeys, corresponding 1:1 with <code>vals</code>.\nMap the values into using the <code>map_fn</code>.\nCreate a new <code>VecMap</code> from the separate <code>keys</code> and <code>vals</code> vecs.\nVals, should be the same length as and correspond 1:1 to …\nValues, corresponding 1:1 with <code>keys</code>.\nComposable bimorphism, wraps an existing morphism by …\nMap-union compound lattice.\nArray-backed <code>MapUnion</code> lattice.\n<code>std::collections::BTreeMap</code>-backed <code>MapUnion</code> lattice.\n<code>std::collections::HashMap</code>-backed <code>MapUnion</code> lattice.\n<code>Option</code>-backed <code>MapUnion</code> lattice.\n<code>crate::collections::SingletonMap</code>-backed <code>MapUnion</code> lattice.\n<code>Vec</code>-backed <code>MapUnion</code> lattice.\nReveal the inner value as an exclusive reference.\nReveal the inner value as a shared reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the inner by value, consuming self.\nCreate a <code>KeyedBimorphism</code> using <code>bimorphism</code> for handling …\nCreate a new <code>MapUnion</code> from a <code>Map</code>.\nCreate a new <code>MapUnion</code> from an <code>Into&lt;Map&gt;</code>.\n<code>std::collections::HashMap</code>-backed <code>MapUnionWithTombstones</code> …\nMap-union-with-tombstones compound lattice.\n<code>crate::collections::SingletonMap</code>-backed …\n<code>crate::collections::SingletonSet</code>-backed …\nReveal the inner value as an exclusive reference.\nReveal the inner value as a shared reference.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the inner by value, consuming self.\nCreate a new <code>MapUnionWithTombstones</code> from a <code>Map</code> and a …\nCreate a new <code>MapUnionWithTombstones</code> from an <code>Into&lt;Map&gt;</code> and …\nImplementation of the Binary Trust semiring ({0,1}, OR, …\nImplementation of the confidence Score semiring ([0, 1], …\nImplementation of the Cost/Tropical semiring (N U Inf, …\nNatural numbers\nImplementation of Fuzzy Logic semiring ([0, 1], max, min, …\nInfinity\nImplementation of the Multiplicity semiring (N, +, *, 0, 1)\nImplementation for N U Inf\noperation\nMin operation\nMaximum is the addition operation for ConfidenceScore …\nMaximum is the addition operation for FuzzyLogic semiring.\nOR operation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\noperation\noperation\nMultiplication is the multiplication operation for …\nMinimum is the multiplication operation for FuzzyLogic …\nAND operation\nCreate a new instance of Multiplicity.\nCreate a new instance of Cost.\nCreate a new instance of ConfidenceScore with the given …\nCreate a new instance of FuzzyLogic with the given value.\nCreate a new ‘Binary Trust’ semiring instance.\n1 is the one element of the semiring.\n0 is the one element of the semiring.\n1 is the one element of the semiring.\n1 is the one element of the semiring.\nTrue is the identity element for multiplication operation.\n0 is the zero element of the semiring.  \nInfinity is the identity element for addition operation.\n0 is the zero element of the semiring.\n0 is the zero element of the semiring.\nFalse is the identity element for addition operation.\nBimorphism for the cartesian product of two sets. Output …\nSet-union lattice.\n<code>crate::collections::ArraySet</code>-backed <code>SetUnion</code> lattice.\n<code>std::collections::BTreeSet</code>-backed <code>SetUnion</code> lattice.\n<code>std::collections::HashSet</code>-backed <code>SetUnion</code> lattice.\n<code>Option</code>-backed <code>SetUnion</code> lattice.\n<code>crate::collections::SingletonSet</code>-backed <code>SetUnion</code> lattice.\n<code>Vec</code>-backed <code>SetUnion</code> lattice.\nReveal the inner value as an exclusive reference.\nReveal the inner value as a shared reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the inner by value, consuming self.\nCreate a new <code>SetUnion</code> from a <code>Set</code>.\nCreate a new <code>SetUnion</code> from an <code>Into&lt;Set&gt;</code>.\nSet-union lattice with tombstones.\n<code>crate::collections::ArraySet</code>-backed <code>SetUnionWithTombstones</code> …\n<code>std::collections::BTreeSet</code>-backed <code>SetUnionWithTombstones</code> …\n<code>std::collections::HashSet</code>-backed <code>SetUnionWithTombstones</code> …\n<code>Option</code>-backed <code>SetUnionWithTombstones</code> lattice.\n<code>crate::collections::SingletonSet</code>-backed …\n<code>crate::collections::SingletonSet</code>-backed …\n<code>Vec</code>-backed <code>SetUnionWithTombstones</code> lattice.\nReveal the inner value as an exclusive reference.\nReveal the inner value as a shared reference.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the inner by value, consuming self.\nCreate a new <code>SetUnionWithTombstones</code> from a <code>Set</code> and …\nCreate a new <code>SetUnionWithTombstones</code> from an <code>Into&lt;Set&gt;</code> and …\nReturns an iterator of <code>N</code>-length arrays containing all …\nHelper which calls many other <code>check_*</code> functions in this …\nCheck that the atomized lattice points re-merge to form …\nChecks that the <code>LatticeBimorphism</code> is valid, i.e. that …\nAsserts that <code>IsBot</code> is true for <code>Default::default()</code>.\nChecks that the item which is bot is less than (or equal …\nChecks that the item which is top is greater than (or …\nChecks that the <code>LatticeMorphism</code> is valid, i.e. that merge …\nCheck that the lattice’s <code>PartialOrd</code> implementation …\nCheck lattice associativity, commutativity, and …\nChecks <code>PartialOrd</code> and <code>PartialEq</code>’s reflexivity, symmetry, …\nUnion-find lattice.\nArray-backed <code>UnionFind</code> lattice.\n<code>std::collections::BTreeMap</code>-backed <code>UnionFind</code> lattice.\n<code>std::collections::HashMap</code>-backed <code>UnionFind</code> lattice.\n<code>Option</code>-backed <code>UnionFind</code> lattice.\n<code>crate::collections::SingletonMap</code>-backed <code>UnionFind</code> lattice.\n<code>Vec</code>-backed <code>UnionFind</code> lattice.\nReveal the inner value as an exclusive reference.\nReveal the inner value as a shared reference.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets the inner by value, consuming self.\nCreate a new <code>UnionFind</code> from a <code>Map</code>.\nCreate a new <code>UnionFind</code> from an <code>Into&lt;Map&gt;</code>.\nReturns if <code>a</code> and <code>b</code> are in the same set.\nUnion the sets containg <code>a</code> and <code>b</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCount the cardinality of each input and periodically …\nStructure for tracking expressions known to have …\nTags the expression as commutative.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nType alias for a hashmap using the <code>fx</code> hash algorithm.\nA speedy hash algorithm for use within rustc. The hashmap …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA handoff’s ID. Invalid if used in a different …\nA staten handle’s ID. Invalid if used in a different …\nA subgraph’s ID. Invalid if used in a different …\nModule for the user-facing <code>Context</code> object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nModule for the <code>Hydroflow</code> struct and helper items.\nHelper extensions for <code>Hydroflow</code>.\nModule for all <code>Handoff</code>-related items.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module contiains networking code.\nOrganizational module for Hydroflow Send/RecvCtx structs …\nOld query API, where each operator is a single subgraph. …\nModule for <code>Reactor</code>.\nModule for <code>StateHandle</code>, part of the “state API”.\nThis module contains types to work with ticks.\nThe main state of the Hydroflow instance, which is …\nAborts all tasks spawned with <code>Self::spawn_tasks</code>.\nAdds state to the context and returns the handle.\nGets the current stratum nubmer.\nGets the ID of the current subgraph.\nGets the current tick (local time) count.\nGets the timestamp of the beginning of the current tick.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets whether this is the first time this subgraph is being …\nWaits for all tasks spawned with <code>Self::spawn_tasks</code> to …\nRemoves state from the context returns it as an owned heap …\nPrepares an async task to be launched by <code>Self::spawn_tasks</code>.\nSchedules a subgraph.\nSets a hook to modify the state at the end of each tick, …\nLaunches all tasks requested with <code>Self::request_task</code> on …\nReturns an exclusive reference to the state.\nReturns a shared reference to the state.\nReturns a <code>Waker</code> for interacting with async Rust. Waker …\nA Hydroflow graph. Owns, schedules, and runs the compiled …\nAlias for <code>Context::abort_tasks</code>.\nAdds referenceable state into the <code>Hydroflow</code> instance. …\nAdds a new compiled subgraph with the specified inputs and …\nAdds a new compiled subgraph with a variable number of …\nAdds a new compiled subgraph with the specified inputs, …\nAdds a new compiled subgraph with a variable number of …\nGets a exclusive (mut) ref to the internal context, …\nGets the current stratum nubmer.\nGets the current tick (local time) count.\nReturns any diagnostics generated by the surface syntax …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlias for <code>Context::join_tasks</code>.\nCreates a handoff edge and returns the corresponding send …\nReturn a handle to the meta <code>HydroflowGraph</code> if set. The …\nCreate a new empty Hydroflow graph.\nGo to the next stratum which has work available, possibly …\nReturns a reactor for externally scheduling subgraphs, …\nEnqueues subgraphs triggered by external events, blocking …\nEnqueues subgraphs triggered by external events …\nAlias for <code>Context::request_task</code>.\nRuns the dataflow graph forever.\nRuns the dataflow graph forever.\nRuns the dataflow until no more (externally-triggered) …\nRuns the dataflow until no more (externally-triggered) …\nRuns the current stratum of the dataflow until no more …\nRuns the dataflow until the next tick begins. Returns true …\nSchedules a subgraph to be run. See also: …\nSets a hook to modify the state at the end of each tick, …\nMarks an output of a <code>TeeingHandoff</code> as dropped so that no …\nTees a <code>TeeingHandoff</code>.\nEnqueues subgraphs triggered by events without blocking.\nConvenience extension methods for the Hydroflow struct.\nAdds an “input” operator, returning a handle to insert …\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nAdds a subgraph with specific topology:\nTrait representing somethign which we can give an item to.\nTrait for handoffs to implement.\nA handle onto the metadata part of a Handoff, with no …\nInner datastructure type.\nWrapper around <code>IntoIterator</code> to avoid trait impl conflicts.\nA Handoff which is part of a “family” of handoffs. …\nTrait representing something which we can attempt to give …\nA Vec-based FIFO handoff.\nHelper to cast an instance of <code>HandoffMeta</code> to <code>Any</code>. In …\nTake the inner datastructure by swapping input and output …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGive a value to the handoff.\nSee <code>CanReceive::give</code>.\nModule for variadic handoff port lists, <code>PortList</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn if the handoff is empty.\nIf this output’s buffer is empty, return true.\nTake the inner datastructure, similar to <code>std::mem::take</code>.\nTry to give a value to the handoff, may return an error if …\nSee <code>TryCanReceive::try_give</code>.\nThe <code>Variadic</code> return type of <code>Self::make_ctx</code>.\nA variadic list of Handoff types, represented using a …\nSealed trait for variadic lists of ports.\nTrait for splitting a list of ports into two.\nThe suffix, second half of the split.\nIteratively/recursively construct a <code>Ctx</code> variadic list.\nIteratively/recursively set the graph metadata for each …\nSplit the port list, returning the prefix and <code>Self::Suffix</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn empty trait used to denote <code>Polarity</code>: either <strong>send</strong> or …\nLightweight ID struct representing an input or output port …\nWrapper around a handoff to differentiate between output …\nAn uninstantiable type used to tag port <code>Polarity</code> as <strong>receive</strong>…\nRecv-specific <code>PortCtx</code>. Input to receive from a handoff.\nRecv-specific variant of <code>Port</code>. An input port.\nAn uninstantiable type used to tag port <code>Polarity</code> as <strong>send</strong>.\nSend-specific <code>PortCtx</code>. Output to send into a handoff.\nSend-specific variant of <code>Port</code>. An output port.\nSee <code>Handoff::borrow_mut_swap</code>.\nMarks this output of a <code>TeeingHandoff</code> as dropped so that no …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAlias for <code>Handoff::give</code> on the inner <code>H</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>Handoff::take_inner</code>.\nTees this <code>TeeingHandoff</code>, given the <code>Hydroflow</code> instance it …\nAlias for <code>Handoff::try_give</code> on the inner <code>H</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA handle into a specific super::graph::Hydroflow instance …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert this <code>Reactor</code> into a <code>std::task::Waker</code> for use with …\nTrigger a subgraph as an external event.\nA handle into a particular <code>Hydroflow</code> instance, referring …\nA state handle with the generic type parameter erased, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA single tick duration.\nThe duration between two ticks.\nA point in time during execution on transducer.\nA zero duration\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new TickInstant\nCreate a new <code>TickDuration</code> for the specified tick interval.\nThe length of the duration, measured in ticks.\nA <strong>data structure</strong> that can be deserialized from any data …\nA <strong>data format</strong> that can deserialize any data structure …\nThe error type that can be returned if some error occurs …\nThe error type when some error occurs during serialization.\nThe output type produced by this <code>Serializer</code> during …\nA <strong>data structure</strong> that can be serialized into any data …\nType returned from <code>serialize_map</code> for serializing the …\nType returned from <code>serialize_seq</code> for serializing the …\nType returned from <code>serialize_struct</code> for serializing the …\nType returned from <code>serialize_struct_variant</code> for …\nType returned from <code>serialize_tuple</code> for serializing the …\nType returned from <code>serialize_tuple_struct</code> for serializing …\nType returned from <code>serialize_tuple_variant</code> for serializing …\nA <strong>data format</strong> that can serialize any data structure …\nCollect an iterator as a map.\nCollect an iterator as a sequence.\nSerialize a string produced by an implementation of <code>Display</code>…\nGeneric data structure deserialization framework.\nDeserialize this value from the given Serde deserializer.\nRequire the <code>Deserializer</code> to figure out how to drive the …\nHint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a <code>char</code> value.\nHint that the <code>Deserialize</code> type is expecting an enum value …\nHint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.\nHint that the <code>Deserialize</code> type is expecting the name of a …\nHint that the <code>Deserialize</code> type needs to deserialize a …\nHint that the <code>Deserialize</code> type is expecting a map of …\nHint that the <code>Deserialize</code> type is expecting a newtype …\nHint that the <code>Deserialize</code> type is expecting an optional …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a struct with …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a tuple struct …\nHint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.\nHint that the <code>Deserialize</code> type is expecting a unit value.\nHint that the <code>Deserialize</code> type is expecting a unit struct …\nHelper macro when implementing the <code>Deserializer</code> part of a …\nDetermine whether <code>Deserialize</code> implementations should …\nDetermine whether <code>Serialize</code> implementations should …\nGeneric data structure serialization framework.\nSerialize this value into the given Serde serializer.\nSerialize a <code>bool</code> value.\nSerialize a chunk of raw byte data.\nSerialize a character.\nSerialize an <code>f32</code> value.\nSerialize an <code>f64</code> value.\nSerialize an <code>i128</code> value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>i8</code> value.\nBegin to serialize a map. This call must be followed by …\nSerialize a newtype struct like <code>struct Millimeters(u8)</code>.\nSerialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.\nSerialize a <code>None</code> value.\nBegin to serialize a variably sized sequence. This call …\nSerialize a <code>Some(T)</code> value.\nSerialize a <code>&amp;str</code>.\nBegin to serialize a struct like …\nBegin to serialize a struct variant like <code>E::S</code> in …\nBegin to serialize a statically sized sequence whose …\nBegin to serialize a tuple struct like …\nBegin to serialize a tuple variant like <code>E::T</code> in …\nSerialize a <code>u128</code> value.\nSerialize a <code>u16</code> value.\nSerialize a <code>u32</code> value.\nSerialize a <code>u64</code> value.\nSerialize a <code>u8</code> value.\nSerialize a <code>()</code> value.\nSerialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.\nSerialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.\nThe input contained a boolean value that was not expected.\nThe input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …\nThe input contained a <code>char</code> that was not expected.\nA <strong>data structure</strong> that can be deserialized from any data …\nA data structure that can be deserialized without …\n<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …\nA <strong>data format</strong> that can deserialize any data structure …\nThe type of the deserializer being converted into.\nThe input contained an enum that was not expected.\nProvides a <code>Visitor</code> access to the data of an enum in the …\nThe <code>Error</code> trait allows <code>Deserialize</code> implementations to …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\nThe error type that can be returned if some error occurs …\n<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …\nThe input contained a floating point <code>f32</code> or <code>f64</code> that was …\nAn efficient way of discarding data from a deserializer.\nConverts an existing value into a <code>Deserializer</code> from which …\nThe input contained a map that was not expected.\nProvides a <code>Visitor</code> access to each entry of a map in the …\nThe input contained a newtype struct that was not expected.\nThe input contained a newtype variant that was not …\nThe input contained an <code>Option&lt;T&gt;</code> that was not expected.\nA message stating what uncategorized thing the input …\nThe input contained a sequence that was not expected.\nProvides a <code>Visitor</code> access to each element of a sequence in …\nThe input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …\n<code>Error</code> is a trait representing the basic expectations for …\nThe input contained a <code>&amp;str</code> or <code>String</code> that was not expected.\nThe input contained a struct variant that was not expected.\nThe input contained a tuple variant that was not expected.\n<code>Unexpected</code> represents an unexpected invocation of any one …\nThe input contained a unit <code>()</code> that was not expected.\nThe input contained a unit variant that was not expected.\nThe input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…\nThe type produced by using this seed.\nThe value produced by this visitor.\nThe <code>Visitor</code> that will be used to deserialize the content …\n<code>VariantAccess</code> is a visitor that is created by the …\nThis trait represents a visitor that walks through a …\nRaised when there is general error when deserializing a …\nEquivalent to the more common <code>Deserialize::deserialize</code> …\nDeserialize this value from the given Serde deserializer.\nRequire the <code>Deserializer</code> to figure out how to drive the …\nHint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a byte array …\nHint that the <code>Deserialize</code> type is expecting a <code>char</code> value.\nHint that the <code>Deserialize</code> type is expecting an enum value …\nHint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.\nHint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.\nHint that the <code>Deserialize</code> type is expecting the name of a …\nHint that the <code>Deserialize</code> type needs to deserialize a …\nHint that the <code>Deserialize</code> type is expecting a map of …\nHint that the <code>Deserialize</code> type is expecting a newtype …\nHint that the <code>Deserialize</code> type is expecting an optional …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a string value …\nHint that the <code>Deserialize</code> type is expecting a struct with …\nHint that the <code>Deserialize</code> type is expecting a sequence of …\nHint that the <code>Deserialize</code> type is expecting a tuple struct …\nHint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.\nHint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.\nHint that the <code>Deserialize</code> type is expecting a unit value.\nHint that the <code>Deserialize</code> type is expecting a unit struct …\nRaised when a <code>Deserialize</code> struct type received more than …\nFormat a message stating what data this Visitor expects to …\nFormat an explanation of what data was being expected. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this value into a deserializer.\nRaised when deserializing a sequence or map and the input …\nRaised when a <code>Deserialize</code> receives a type different from …\nRaised when a <code>Deserialize</code> receives a value of the right …\nDetermine whether <code>Deserialize</code> implementations should …\nRaised when a <code>Deserialize</code> struct type expected to receive …\nCalled when deserializing a variant with a single value.\nCalled when deserializing a variant with a single value.\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some(value))</code> for the next value in the …\nThis returns <code>Ok(Some((key, value)))</code> for the next …\nThis returns <code>Ok(Some((key, value)))</code> for the next …\nThis returns <code>Ok(Some(key))</code> for the next key in the map, or …\nThis returns <code>Ok(Some(key))</code> for the next key in the map, or …\nThis returns a <code>Ok(value)</code> for the next value in the map.\nThis returns a <code>Ok(value)</code> for the next value in the map.\nProvides type based access to context intended for error …\nReturns the number of elements remaining in the sequence, …\nReturns the number of entries remaining in the map, if …\nThe lower-level source of this error, if any.\nCalled when deserializing a struct-like variant.\nCalled when deserializing a tuple-like variant.\nCalled when deserializing a variant with no values.\nRaised when a <code>Deserialize</code> struct type received a field …\nRaised when a <code>Deserialize</code> enum type received a variant …\nBuilding blocks for deserializing basic values using the …\n<code>variant</code> is called to identify which variant to deserialize.\n<code>variant</code> is called to identify which variant to deserialize.\nThe input contains a boolean.\nThe input contains a byte array that lives at least as …\nThe input contains a string that lives at least as long as …\nThe input contains a byte array and ownership of the byte …\nThe input contains a byte array. The lifetime of the byte …\nThe input contains a <code>char</code>.\nThe input contains an enum.\nThe input contains an <code>f32</code>.\nThe input contains an <code>f64</code>.\nThe input contains a <code>i128</code>.\nThe input contains an <code>i16</code>.\nThe input contains an <code>i32</code>.\nThe input contains an <code>i64</code>.\nThe input contains an <code>i8</code>.\nThe input contains a key-value map.\nThe input contains a newtype struct.\nThe input contains an optional that is absent.\nThe input contains a sequence of elements.\nThe input contains an optional that is present.\nThe input contains a string. The lifetime of the string is …\nThe input contains a string and ownership of the string is …\nThe input contains a <code>u128</code>.\nThe input contains a <code>u16</code>.\nThe input contains a <code>u32</code>.\nThe input contains a <code>u64</code>.\nThe input contains a <code>u8</code>.\nThe input contains a unit <code>()</code>.\nA deserializer holding a <code>bool</code>.\nA deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …\nA deserializer holding a <code>&amp;str</code> with a lifetime tied to …\nA deserializer holding a <code>&amp;[u8]</code>. Always calls …\nA deserializer holding a <code>char</code>.\nA deserializer holding a <code>Cow&lt;str&gt;</code>.\nA deserializer holding an <code>EnumAccess</code>.\nA minimal representation of all possible errors that can …\nA deserializer holding an <code>f32</code>.\nA deserializer holding an <code>f64</code>.\nA deserializer holding an <code>i128</code>.\nA deserializer holding an <code>i16</code>.\nA deserializer holding an <code>i32</code>.\nA deserializer holding an <code>i64</code>.\nA deserializer holding an <code>i8</code>.\nA deserializer holding an <code>isize</code>.\nA deserializer holding a <code>MapAccess</code>.\nA deserializer that iterates over a map.\nA deserializer holding a <code>SeqAccess</code>.\nA deserializer that iterates over a sequence.\nA deserializer holding a <code>&amp;str</code>.\nA deserializer holding a <code>String</code>.\nA deserializer holding a <code>u128</code>.\nA deserializer holding a <code>u16</code>.\nA deserializer holding a <code>u32</code>.\nA deserializer holding a <code>u64</code>.\nA deserializer holding a <code>u8</code>.\nA deserializer holding a <code>()</code>.\nA deserializer holding a <code>usize</code>.\nCheck for remaining elements after passing a …\nCheck for remaining elements after passing a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new borrowed deserializer from the given string.\nCreate a new deserializer from the given bytes.\nCreate a new borrowed deserializer from the given borrowed …\nConstruct a new <code>MapDeserializer&lt;I, E&gt;</code>.\nConstruct a new <code>SeqDeserializer&lt;I, E&gt;</code>.\nConstruct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.\nConstruct a new <code>MapAccessDeserializer&lt;A&gt;</code>.\nConstruct a new <code>EnumAccessDeserializer&lt;A&gt;</code>.\nTrait used by <code>Serialize</code> implementations to generically …\nThe error type when some error occurs during serialization.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nMust match the <code>Error</code> type of our <code>Serializer</code>.\nHelper type for implementing a <code>Serializer</code> that does not …\nThe output type produced by this <code>Serializer</code> during …\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nMust match the <code>Ok</code> type of our <code>Serializer</code>.\nA <strong>data structure</strong> that can be serialized into any data …\nReturned from <code>Serializer::serialize_map</code>.\nType returned from <code>serialize_map</code> for serializing the …\nReturned from <code>Serializer::serialize_seq</code>.\nType returned from <code>serialize_seq</code> for serializing the …\nReturned from <code>Serializer::serialize_struct</code>.\nType returned from <code>serialize_struct</code> for serializing the …\nReturned from <code>Serializer::serialize_struct_variant</code>.\nType returned from <code>serialize_struct_variant</code> for …\nReturned from <code>Serializer::serialize_tuple</code>.\nType returned from <code>serialize_tuple</code> for serializing the …\nReturned from <code>Serializer::serialize_tuple_struct</code>.\nType returned from <code>serialize_tuple_struct</code> for serializing …\nReturned from <code>Serializer::serialize_tuple_variant</code>.\nType returned from <code>serialize_tuple_variant</code> for serializing …\nA <strong>data format</strong> that can serialize any data structure …\n<code>Error</code> is a trait representing the basic expectations for …\nCollect an iterator as a map.\nCollect an iterator as a sequence.\nSerialize a string produced by an implementation of <code>Display</code>…\nUsed when a <code>Serialize</code> implementation encounters any error …\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nReturns some mutable reference to the inner value if it is …\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some reference to the inner value if it is of type …\nFinish serializing a sequence.\nFinish serializing a tuple.\nFinish serializing a tuple struct.\nFinish serializing a tuple variant.\nFinish serializing a map.\nFinish serializing a struct.\nFinish serializing a struct variant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nDetermine whether <code>Serialize</code> implementations should …\nProvides type based access to context intended for error …\nSerialize this value into the given Serde serializer.\nSerialize a <code>bool</code> value.\nSerialize a chunk of raw byte data.\nSerialize a character.\nSerialize a sequence element.\nSerialize a tuple element.\nSerialize a map entry consisting of a key and a value.\nSerialize an <code>f32</code> value.\nSerialize an <code>f64</code> value.\nSerialize a tuple struct field.\nSerialize a tuple variant field.\nSerialize a struct field.\nSerialize a struct variant field.\nSerialize an <code>i128</code> value.\nSerialize an <code>i16</code> value.\nSerialize an <code>i32</code> value.\nSerialize an <code>i64</code> value.\nSerialize an <code>i8</code> value.\nSerialize a map key.\nBegin to serialize a map. This call must be followed by …\nSerialize a newtype struct like <code>struct Millimeters(u8)</code>.\nSerialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.\nSerialize a <code>None</code> value.\nBegin to serialize a variably sized sequence. This call …\nSerialize a <code>Some(T)</code> value.\nSerialize a <code>&amp;str</code>.\nBegin to serialize a struct like …\nBegin to serialize a struct variant like <code>E::S</code> in …\nBegin to serialize a statically sized sequence whose …\nBegin to serialize a tuple struct like …\nBegin to serialize a tuple variant like <code>E::T</code> in …\nSerialize a <code>u128</code> value.\nSerialize a <code>u16</code> value.\nSerialize a <code>u32</code> value.\nSerialize a <code>u64</code> value.\nSerialize a <code>u8</code> value.\nSerialize a <code>()</code> value.\nSerialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.\nSerialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.\nSerialize a map value.\nIndicate that a struct field has been skipped.\nIndicate that a struct variant field has been skipped.\nThe lower-level source of this error, if any.\nReturns an iterator starting with the current error and …\nRepresents a JSON array.\nRepresents a JSON boolean.\nA structure that deserializes JSON into Rust values.\nContains the error value\nThis type represents all possible errors that can occur …\nRepresents a JSON key/value type.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nContains the success value\nAlias for a <code>Result</code> with the error type <code>serde_json::Error</code>.\nA structure for serializing Rust values into JSON.\nIterator that deserializes a stream into multiple JSON …\nRepresents a JSON string.\nRepresents any valid JSON value.\nMoves all elements from other into self, leaving other …\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nRepresents the number as f64 if possible. Returns None …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Number</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nIf the <code>Number</code> is an integer, represent it as u64 if …\nReturns the number of bytes so far deserialized into a …\nCategorizes the cause of this error.\nClears the map, removing all values.\nOne-based column number at which the error was detected.\nReturns true if the map contains a value for the specified …\nDeserialize JSON data to a Rust data structure.\nParses a JSON string as bytes. Note that this function …\nParses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …\nParses a newtype struct as the underlying value.\nParses a <code>null</code> as a None, and any other values as a …\nParse arbitrarily deep JSON structures without any …\nThe <code>Deserializer::end</code> method should be called after a …\nGets the given key’s corresponding entry in the map for …\nWhen serializing or deserializing JSON goes wrong.\nDisplay a JSON value as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert string slice to <code>Value::String</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert a slice to <code>Value::Array</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nReturns the argument unchanged.\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert boolean to <code>Value::Bool</code>.\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert copy-on-write string to <code>Value::String</code>.\nReturns the argument unchanged.\nConverts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate a <code>Value::Object</code> by collecting an iterator of …\nDeserialize an instance of type <code>T</code> from an I/O stream of …\nCreates a JSON deserializer from an <code>io::Read</code>.\nDeserialize an instance of type <code>T</code> from bytes of JSON text.\nCreates a JSON deserializer from a <code>&amp;[u8]</code>.\nDeserialize an instance of type <code>T</code> from a string of JSON …\nCreates a JSON deserializer from a <code>&amp;str</code>.\nInterpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.\nReturns a reference to the value corresponding to the key.\nIndex into a JSON array or map. A string index can be used …\nReturns the key-value pair matching the given key.\nReturns a mutable reference to the value corresponding to …\nMutably index into a JSON array or map. A string index can …\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap the <code>Writer</code> from the <code>Serializer</code>.\nTurn a JSON deserializer into an iterator over values of …\nThe kind reported by the underlying standard library I/O …\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if this error was caused by input data that …\nReturns true if the map contains no elements.\nReturns true if this error was caused by prematurely …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Number</code> can be represented by f64.\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …\nReturns true if this error was caused by a failure to read …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if this error was caused by input that was not\nReturns true if the <code>Value</code> is an integer between zero and …\nReturns true if the <code>Number</code> is an integer between zero and …\nGets an iterator over the entries of the map.\nGets a mutable iterator over the entries of the map.\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nGets an iterator over the keys of the map.\nReturns the number of elements in the map.\nOne-based line number at which the error was detected.\nA map of String to serde_json::Value.\nCreate a JSON deserializer from one of the possible …\nCreate a JSON stream deserializer from one of the possible …\nMakes a new empty Map.\nCreates a new JSON serializer.\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nCreates a new JSON pretty print serializer.\nRemoves a key from the map, returning the value at the key …\nRemoves a key from the map, returning the stored key and …\nRetains only the elements specified by the predicate.\nSerialize a Rust data structure into JSON data.\nSerialize newtypes without an object wrapper.\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nSerialize the given data structure as a String of JSON.\nSerialize the given data structure as a pretty-printed …\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nSerialize the given data structure as a JSON byte vector.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as JSON into the I/O …\nSerialize the given data structure as pretty-printed JSON …\nThe Value enum, a loosely typed way of representing any …\nGets an iterator over the values of the map.\nGets an iterator over mutable values of the map.\nMakes a new empty Map with the given initial capacity.\nCreates a new JSON visitor whose output will be written to …\nA structure that deserializes JSON into Rust values.\nJSON input source that reads from a std::io input stream.\nTrait used by the deserializer for iterating over input. …\nJSON input source that reads from a slice of bytes.\nJSON input source that reads from a UTF-8 string.\nIterator that deserializes a stream into multiple JSON …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize an instance of type <code>T</code> from an I/O stream of …\nDeserialize an instance of type <code>T</code> from bytes of JSON text.\nDeserialize an instance of type <code>T</code> from a string of JSON …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a JSON input source to read from a std::io input …\nCreate a JSON input source to read from a slice of bytes.\nCreate a JSON input source to read from a UTF-8 string.\nCategorizes the cause of a <code>serde_json::Error</code>.\nThe error was caused by input data that was semantically …\nThe error was caused by prematurely reaching the end of …\nContains the error value\nThis type represents all possible errors that can occur …\nThe error was caused by a failure to read or write bytes …\nContains the success value\nAlias for a <code>Result</code> with the error type <code>serde_json::Error</code>.\nThe error was caused by input that was not syntactically …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA view into a single entry in a map, which may either be …\nAn owning iterator over a serde_json::Map’s entries.\nAn iterator over a serde_json::Map’s entries.\nA mutable iterator over a serde_json::Map’s entries.\nAn iterator over a serde_json::Map’s keys.\nRepresents a JSON key/value type.\nAn occupied Entry.\nAn occupied Entry. It is part of the <code>Entry</code> enum.\nA vacant Entry.\nA vacant Entry. It is part of the <code>Entry</code> enum.\nAn iterator over a serde_json::Map’s values.\nA mutable iterator over a serde_json::Map’s values.\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to its value.\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nTakes the value of the entry out of the map, and returns …\nRemoves the entry from the map, returning the stored key …\nAn escaped ASCII plane control character (usually escaped …\nAn escaped backspace character (usually escaped as <code>\\b</code>)\nAn escaped carriage return character (usually escaped as <code>\\r</code>…\nRepresents a character escape code in a type-safe manner.\nThis structure compacts a JSON value with no extra …\nAn escaped form feed character (usually escaped as <code>\\f</code>)\nThis trait abstracts away serializing the JSON control …\nAn escaped line feed character (usually escaped as <code>\\n</code>)\nThis structure pretty prints a JSON value to make it human …\nAn escaped quote <code>&quot;</code>\nAn escaped reverse solidus <code>\\</code>\nA structure for serializing Rust values into JSON.\nAn escaped solidus <code>/</code>\nAn escaped tab character (usually escaped as <code>\\t</code>)\nCalled before every array.  Writes a <code>[</code> to the specified …\nCalled before every array value.  Writes a <code>,</code> if needed to …\nCalled before every object.  Writes a <code>{</code> to the specified …\nCalled before every object key.\nCalled before every object value.  A <code>:</code> should be written to\nCalled before each series of <code>write_string_fragment</code> and …\nCalled after every array.  Writes a <code>]</code> to the specified …\nCalled after every array value.\nCalled after every object.  Writes a <code>}</code> to the specified …\nCalled after every object key.  A <code>:</code> should be written to …\nCalled after every object value.\nCalled after each series of <code>write_string_fragment</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a pretty printer formatter that defaults to …\nSerialize the given data structure as a String of JSON.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as a JSON byte vector.\nSerialize the given data structure as a pretty-printed …\nSerialize the given data structure as JSON into the I/O …\nSerialize the given data structure as pretty-printed JSON …\nConstruct a pretty printer formatter that uses the <code>indent</code> …\nWrites a <code>true</code> or <code>false</code> value to the specified writer.\nWrites the representation of a byte array. Formatters can …\nWrites a character escape code to the specified writer.\nWrites a floating point value like <code>-31.26e+12</code> to the …\nWrites a floating point value like <code>-31.26e+12</code> to the …\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites an integer value like <code>-123</code> to the specified writer.\nWrites a <code>null</code> value to the specified writer.\nWrites a number that has already been rendered to a string.\nWrites a raw JSON fragment that doesn’t need any …\nWrites a string fragment that doesn’t need any escaping …\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nWrites an integer value like <code>123</code> to the specified writer.\nRepresents a JSON array.\nRepresents a JSON boolean.\nA type that can be used to index into a <code>serde_json::Value</code>.\nRepresents a JSON key/value type.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nSerializer whose output is a <code>Value</code>.\nRepresents a JSON string.\nRepresents any valid JSON value.\nReturns the argument unchanged.\nInterpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.\nCalls <code>U::from(self)</code>.\nConvert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarks the stream as being bounded, which means that it is …\nMarks the stream as existing outside of a clock domain.\nAn infinite stream of elements of type <code>T</code>.\nMarks the stream as being inside the single global clock …\nMarks the stream as being unbounded, which means that it …\nAllow this stream through if the other stream has …\nAllow this stream through if the other stream is empty, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAsynchronous file utilities.\nTraits, helpers, and type definitions for asynchronous I/O …\nWaits on multiple concurrent branches, returning when <strong>all</strong> …\nMarks async function to be executed by the selected …\nTCP/UDP/Unix bindings for <code>tokio</code>.\nPins a value on the stack.\nAn implementation of asynchronous process management for …\nThe Tokio runtime.\nWaits on multiple concurrent branches, returning when the …\nAsynchronous signal handling for Tokio.\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nDue to the <code>Stream</code> trait’s inclusion in <code>std</code> landing later …\nSynchronization primitives for use in asynchronous …\nAsynchronous green-threads.\nDeclares a new task-local key of type <code>tokio::task::LocalKey</code>…\nMarks async function to be executed by runtime, suitable …\nUtilities for tracking time.\nWaits on multiple concurrent branches, returning when <strong>all</strong> …\nA builder for creating directories in various manners.\nEntries returned by the <code>ReadDir</code> stream.\nA reference to an open file on the filesystem.\nOptions and flags which can be used to configure how a …\nReads the entries in a directory.\nSets the option for the append mode.\nReturns the canonical, absolute form of a path with all …\nCopies the contents of one file to another. This function …\nOpens a file in write-only mode.\nCreates the specified directory with the configured …\nSets the option for creating a new file.\nCreates a new, empty directory at the provided path.\nRecursively creates a directory and all of its parent …\nOpens a file in read-write mode.\nSets the option to always create a new file.\nPasses custom flags to the <code>flags</code> argument of <code>open</code>.\nReturns the bare file name of this directory entry without …\nReturns the file type for the file that this entry points …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>std::fs::File</code> to a <code>tokio::fs::File</code>.\nCreates a new hard link on the filesystem.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDestructures <code>File</code> into a <code>std::fs::File</code>. This function is …\nGiven a path, queries the file system to get information …\nQueries metadata about the underlying file.\nReturns the metadata for the file that this entry points …\nSets the mode to create new directories with.\nSets the mode bits that a new file will be created with.\nCreates a new set of options with default mode/security …\nCreates a blank new set of options ready for configuration.\nReturns the next entry in the directory stream.\nAttempts to open a file in read-only mode.\nOpens a file at <code>path</code> with the options specified by <code>self</code>.\nReturns a new <code>OpenOptions</code> object.\nReturns the full path to the file that this entry …\nPolls for the next directory entry in the stream.\nReads the entire contents of a file into a bytes vector.\nSets the option for read access.\nReturns a stream over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nCreates a future which will open a file for reading and …\nIndicates whether to create directories recursively …\nRemoves an existing, empty directory.\nRemoves a directory at this path, after removing all its …\nRemoves a file from the filesystem.\nRenames a file or directory to a new name, replacing the …\nTruncates or extends the underlying file, updating the …\nSet the maximum buffer size for the underlying <code>AsyncRead</code> / …\nChanges the permissions found on a file or a directory.\nChanges the permissions on the underlying file.\nCreates a new symbolic link on the filesystem.\nQueries the file system metadata for a path.\nAttempts to sync all OS-internal metadata to disk.\nThis function is similar to <code>sync_all</code>, except that it may …\nSets the option for truncating a previous file.\nCreates a new <code>File</code> instance that shares the same …\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nTries to immediately destructure <code>File</code> into a <code>std::fs::File</code>.\nCreates a future that will open a file for writing and …\nSets the option for write access.\nReturns a <code>Ready</code> representing readiness for all operations.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nReads bytes asynchronously.\nAn extension trait which adds utility methods to …\nReads bytes from a source.\nReads bytes from a source.\nSeek bytes asynchronously.\nAn extension trait that adds utility methods to <code>AsyncSeek</code> …\nWrites bytes asynchronously.\nWrites bytes to a sink.\nThe operation failed because a pipe was closed.\nThe <code>BufReader</code> struct adds buffering to any reader.\nWraps a type that is <code>AsyncWrite</code> and <code>AsyncRead</code>, and buffers …\nWraps a writer and buffers its output.")