searchState.loadedDescShard("stageleft", 0, "Represents a piece of data that will be passed into the …\nDefines an entrypoint for staged code, which will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a quoted expression for Hydroflow+.\nCaptures a fully qualified path to a given type, which is …\nMarks a chunk of code as being runtime-only, which means …\nA utility for declaring top-level public modules in a …\nA region of source code, along with macro expansion …\nAn abstract stream of tokens, or more concretely a …\nReturns the span’s byte position range in the source …\nThe span of the invocation of the current procedural macro.\nGet the ending line/column in the source file for this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this <code>TokenStream</code> is empty.\nCreate a new span encompassing <code>self</code> and <code>other</code>.\nCreates a new span with the same name resolution behavior …\nThe span located at the invocation of the procedural …\nReturns an empty <code>TokenStream</code> containing no token trees.\nThe whole point.\nCreates a new span with the same line/column information …\nReturns the source text behind a span. This preserves the …\nGet the starting line/column in the source file for this …\nConvert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")